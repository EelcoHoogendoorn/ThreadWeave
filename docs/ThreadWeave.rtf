{\rtf1\adeflang1025\ansi\ansicpg1252\uc1\adeff0\deff0\stshfdbch0\stshfloch31506\stshfhich31506\stshfbi31506\deflang1033\deflangfe1033\themelang1033\themelangfe0\themelangcs0{\fonttbl{\f0\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f2\fbidi \fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}
{\f3\fbidi \froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}{\f10\fbidi \fnil\fcharset2\fprq2{\*\panose 05000000000000000000}Wingdings;}{\f34\fbidi \froman\fcharset0\fprq2{\*\panose 02040503050406030204}Cambria Math;}
{\f36\fbidi \froman\fcharset0\fprq2{\*\panose 02040503050406030204}Cambria;}{\f37\fbidi \fswiss\fcharset0\fprq2{\*\panose 020f0502020204030204}Calibri;}{\flomajor\f31500\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\fdbmajor\f31501\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\fhimajor\f31502\fbidi \froman\fcharset0\fprq2{\*\panose 02040503050406030204}Cambria;}
{\fbimajor\f31503\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\flominor\f31504\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\fdbminor\f31505\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\fhiminor\f31506\fbidi \fswiss\fcharset0\fprq2{\*\panose 020f0502020204030204}Calibri;}
{\fbiminor\f31507\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f292\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}{\f293\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}
{\f295\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}{\f296\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}{\f297\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\f298\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}
{\f299\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}{\f300\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}{\f312\fbidi \fmodern\fcharset238\fprq1 Courier New CE;}{\f313\fbidi \fmodern\fcharset204\fprq1 Courier New Cyr;}
{\f315\fbidi \fmodern\fcharset161\fprq1 Courier New Greek;}{\f316\fbidi \fmodern\fcharset162\fprq1 Courier New Tur;}{\f317\fbidi \fmodern\fcharset177\fprq1 Courier New (Hebrew);}{\f318\fbidi \fmodern\fcharset178\fprq1 Courier New (Arabic);}
{\f319\fbidi \fmodern\fcharset186\fprq1 Courier New Baltic;}{\f320\fbidi \fmodern\fcharset163\fprq1 Courier New (Vietnamese);}{\f632\fbidi \froman\fcharset238\fprq2 Cambria Math CE;}{\f633\fbidi \froman\fcharset204\fprq2 Cambria Math Cyr;}
{\f635\fbidi \froman\fcharset161\fprq2 Cambria Math Greek;}{\f636\fbidi \froman\fcharset162\fprq2 Cambria Math Tur;}{\f639\fbidi \froman\fcharset186\fprq2 Cambria Math Baltic;}{\f640\fbidi \froman\fcharset163\fprq2 Cambria Math (Vietnamese);}
{\f652\fbidi \froman\fcharset238\fprq2 Cambria CE;}{\f653\fbidi \froman\fcharset204\fprq2 Cambria Cyr;}{\f655\fbidi \froman\fcharset161\fprq2 Cambria Greek;}{\f656\fbidi \froman\fcharset162\fprq2 Cambria Tur;}
{\f659\fbidi \froman\fcharset186\fprq2 Cambria Baltic;}{\f660\fbidi \froman\fcharset163\fprq2 Cambria (Vietnamese);}{\f662\fbidi \fswiss\fcharset238\fprq2 Calibri CE;}{\f663\fbidi \fswiss\fcharset204\fprq2 Calibri Cyr;}
{\f665\fbidi \fswiss\fcharset161\fprq2 Calibri Greek;}{\f666\fbidi \fswiss\fcharset162\fprq2 Calibri Tur;}{\f669\fbidi \fswiss\fcharset186\fprq2 Calibri Baltic;}{\f670\fbidi \fswiss\fcharset163\fprq2 Calibri (Vietnamese);}
{\flomajor\f31508\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}{\flomajor\f31509\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}{\flomajor\f31511\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}
{\flomajor\f31512\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}{\flomajor\f31513\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\flomajor\f31514\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}
{\flomajor\f31515\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}{\flomajor\f31516\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}{\fdbmajor\f31518\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}
{\fdbmajor\f31519\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}{\fdbmajor\f31521\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}{\fdbmajor\f31522\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}
{\fdbmajor\f31523\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\fdbmajor\f31524\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}{\fdbmajor\f31525\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}
{\fdbmajor\f31526\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}{\fhimajor\f31528\fbidi \froman\fcharset238\fprq2 Cambria CE;}{\fhimajor\f31529\fbidi \froman\fcharset204\fprq2 Cambria Cyr;}
{\fhimajor\f31531\fbidi \froman\fcharset161\fprq2 Cambria Greek;}{\fhimajor\f31532\fbidi \froman\fcharset162\fprq2 Cambria Tur;}{\fhimajor\f31535\fbidi \froman\fcharset186\fprq2 Cambria Baltic;}
{\fhimajor\f31536\fbidi \froman\fcharset163\fprq2 Cambria (Vietnamese);}{\fbimajor\f31538\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}{\fbimajor\f31539\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}
{\fbimajor\f31541\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}{\fbimajor\f31542\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}{\fbimajor\f31543\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}
{\fbimajor\f31544\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}{\fbimajor\f31545\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}{\fbimajor\f31546\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}
{\flominor\f31548\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}{\flominor\f31549\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}{\flominor\f31551\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}
{\flominor\f31552\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}{\flominor\f31553\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\flominor\f31554\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}
{\flominor\f31555\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}{\flominor\f31556\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}{\fdbminor\f31558\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}
{\fdbminor\f31559\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}{\fdbminor\f31561\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}{\fdbminor\f31562\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}
{\fdbminor\f31563\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\fdbminor\f31564\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}{\fdbminor\f31565\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}
{\fdbminor\f31566\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}{\fhiminor\f31568\fbidi \fswiss\fcharset238\fprq2 Calibri CE;}{\fhiminor\f31569\fbidi \fswiss\fcharset204\fprq2 Calibri Cyr;}
{\fhiminor\f31571\fbidi \fswiss\fcharset161\fprq2 Calibri Greek;}{\fhiminor\f31572\fbidi \fswiss\fcharset162\fprq2 Calibri Tur;}{\fhiminor\f31575\fbidi \fswiss\fcharset186\fprq2 Calibri Baltic;}
{\fhiminor\f31576\fbidi \fswiss\fcharset163\fprq2 Calibri (Vietnamese);}{\fbiminor\f31578\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}{\fbiminor\f31579\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}
{\fbiminor\f31581\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}{\fbiminor\f31582\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}{\fbiminor\f31583\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}
{\fbiminor\f31584\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}{\fbiminor\f31585\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}{\fbiminor\f31586\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;
\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;\caccentone\ctint255\cshade255\red79\green129\blue189;\ctexttwo\ctint255\cshade191\red23\green54\blue93;}{\*\defchp \f31506\fs22 }
{\*\defpap \ql \li0\ri0\sa200\sl276\slmult1\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 }\noqfpromote {\stylesheet{\ql \li0\ri0\sa200\sl276\slmult1\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 
\rtlch\fcs1 \af0\afs22\alang1025 \ltrch\fcs0 \f31506\fs22\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \snext0 \sqformat \spriority0 Normal;}{\s2\ql \li0\ri0\sb200\sl276\slmult1
\keep\keepn\widctlpar\wrapdefault\aspalpha\aspnum\faauto\outlinelevel1\adjustright\rin0\lin0\itap0 \rtlch\fcs1 \ab\af0\afs26\alang1025 \ltrch\fcs0 \b\fs26\cf17\lang1033\langfe1033\loch\f31502\hich\af31502\dbch\af31501\cgrid\langnp1033\langfenp1033 
\sbasedon0 \snext0 \slink19 \sunhideused \sqformat \spriority9 \styrsid11019763 heading 2;}{\s3\ql \li0\ri0\sb200\sl276\slmult1\keep\keepn\widctlpar\wrapdefault\aspalpha\aspnum\faauto\outlinelevel2\adjustright\rin0\lin0\itap0 \rtlch\fcs1 
\ab\af0\afs22\alang1025 \ltrch\fcs0 \b\fs22\cf17\lang1033\langfe1033\loch\f31502\hich\af31502\dbch\af31501\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext0 \slink17 \sunhideused \sqformat \spriority9 \styrsid797851 heading 3;}{\*\cs10 \additive 
\ssemihidden \sunhideused \spriority1 Default Paragraph Font;}{\*\ts11\tsrowd\trftsWidthB3\trpaddl108\trpaddr108\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3\tblind0\tblindtype3\tsvertalt\tsbrdrt\tsbrdrl\tsbrdrb\tsbrdrr\tsbrdrdgl\tsbrdrdgr\tsbrdrh\tsbrdrv 
\ql \li0\ri0\sa200\sl276\slmult1\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \rtlch\fcs1 \af31506\afs22\alang1025 \ltrch\fcs0 \f31506\fs22\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \snext11 \ssemihidden \sunhideused 
Normal Table;}{\s15\ql \li720\ri0\sa200\sl276\slmult1\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin720\itap0\contextualspace \rtlch\fcs1 \af0\afs22\alang1025 \ltrch\fcs0 \f31506\fs22\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 
\sbasedon0 \snext15 \sqformat \spriority34 \styrsid7949931 List Paragraph;}{\s16\ql \li0\ri0\sa300\widctlpar\brdrb\brdrs\brdrw20\brsp80\brdrcf17 \wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\contextualspace \rtlch\fcs1 
\af0\afs52\alang1025 \ltrch\fcs0 \fs52\expnd1\expndtw5\cf18\lang1033\langfe1033\kerning28\loch\f31502\hich\af31502\dbch\af31501\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext0 \slink20 \sqformat \spriority10 \styrsid13658677 Title;}{\*\cs17 \additive 
\rtlch\fcs1 \ab\af0 \ltrch\fcs0 \b\cf17\loch\f31502\hich\af31502\dbch\af31501 \sbasedon10 \slink3 \slocked \spriority9 \styrsid797851 Kop 3 Char;}{\*\ts18\tsrowd\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 
\trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 \trftsWidthB3\trpaddl108\trpaddr108\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3\tblind0\tblindtype3\tsvertalt\tsbrdrt\tsbrdrl\tsbrdrb\tsbrdrr\tsbrdrdgl\tsbrdrdgr\tsbrdrh\tsbrdrv 
\ql \li0\ri0\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \rtlch\fcs1 \af0\afs22\alang1025 \ltrch\fcs0 \f31506\fs22\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon11 \snext18 \spriority59 \styrsid14566738 
Table Grid;}{\*\cs19 \additive \rtlch\fcs1 \ab\af0\afs26 \ltrch\fcs0 \b\fs26\cf17\loch\f31502\hich\af31502\dbch\af31501 \sbasedon10 \slink2 \slocked \spriority9 \styrsid11019763 Kop 2 Char;}{\*\cs20 \additive \rtlch\fcs1 \af0\afs52 \ltrch\fcs0 
\fs52\expnd1\expndtw5\cf18\kerning28\loch\f31502\hich\af31502\dbch\af31501 \sbasedon10 \slink16 \slocked \spriority10 \styrsid13658677 Titel Char;}{\s21\ql \li0\ri0\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \rtlch\fcs1 
\af0\afs22\alang1025 \ltrch\fcs0 \f31506\fs22\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \snext21 \sqformat \spriority1 \styrsid14566738 No Spacing;}{\s22\ql \li0\ri0\widctlpar
\tqc\tx4680\tqr\tx9360\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \rtlch\fcs1 \af0\afs22\alang1025 \ltrch\fcs0 \f31506\fs22\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext22 \slink26 \sunhideused \styrsid3933264 
header;}{\*\cs23 \additive \rtlch\fcs1 \af0 \ltrch\fcs0 \sbasedon10 \slink24 \slocked \styrsid3933264 Voettekst Char;}{\s24\ql \li0\ri0\widctlpar\tqc\tx4680\tqr\tx9360\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \rtlch\fcs1 
\af0\afs22\alang1025 \ltrch\fcs0 \f31506\fs22\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext24 \slink23 \sunhideused \styrsid3933264 footer;}{\*\cs26 \additive \rtlch\fcs1 \af0 \ltrch\fcs0 
\sbasedon10 \slink22 \slocked \styrsid3933264 Koptekst Char;}}{\*\listtable{\list\listtemplateid1895869328\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext
\leveltemplateid67698689\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0 \fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\lvltentative\levelspace0\levelindent0{\leveltext\leveltemplateid67698691
\'01o;}{\levelnumbers;}\f2\fbias0 \fi-360\li1440\lin1440 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\lvltentative\levelspace0\levelindent0{\leveltext\leveltemplateid67698693\'01\u-3929 ?;}{\levelnumbers;}\f10\fbias0 
\fi-360\li2160\lin2160 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\lvltentative\levelspace0\levelindent0{\leveltext\leveltemplateid67698689\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0 \fi-360\li2880\lin2880 }{\listlevel
\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\lvltentative\levelspace0\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\fbias0 \fi-360\li3600\lin3600 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0
\levelfollow0\levelstartat1\lvltentative\levelspace0\levelindent0{\leveltext\leveltemplateid67698693\'01\u-3929 ?;}{\levelnumbers;}\f10\fbias0 \fi-360\li4320\lin4320 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1
\lvltentative\levelspace0\levelindent0{\leveltext\leveltemplateid67698689\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0 \fi-360\li5040\lin5040 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\lvltentative\levelspace0
\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\fbias0 \fi-360\li5760\lin5760 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\lvltentative\levelspace0\levelindent0{\leveltext
\leveltemplateid67698693\'01\u-3929 ?;}{\levelnumbers;}\f10\fbias0 \fi-360\li6480\lin6480 }{\listname ;}\listid814688723}{\list\listtemplateid-1340154646\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat0
\levelspace0\levelindent0{\leveltext\leveltemplateid-1245945194\'01-;}{\levelnumbers;}\loch\af37\hich\af37\dbch\af0\fbias0 \fi-360\li413\lin413 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0
{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\fbias0 \fi-360\li1133\lin1133 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\lvltentative\levelspace0\levelindent0{\leveltext\leveltemplateid67698693
\'01\u-3929 ?;}{\levelnumbers;}\f10\fbias0 \fi-360\li1853\lin1853 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\lvltentative\levelspace0\levelindent0{\leveltext\leveltemplateid67698689\'01\u-3913 ?;}{\levelnumbers;}
\f3\fbias0 \fi-360\li2573\lin2573 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\lvltentative\levelspace0\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\fbias0 \fi-360\li3293\lin3293 }
{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\lvltentative\levelspace0\levelindent0{\leveltext\leveltemplateid67698693\'01\u-3929 ?;}{\levelnumbers;}\f10\fbias0 \fi-360\li4013\lin4013 }{\listlevel\levelnfc23\levelnfcn23
\leveljc0\leveljcn0\levelfollow0\levelstartat1\lvltentative\levelspace0\levelindent0{\leveltext\leveltemplateid67698689\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0 \fi-360\li4733\lin4733 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0
\levelstartat1\lvltentative\levelspace0\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\fbias0 \fi-360\li5453\lin5453 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\lvltentative\levelspace0
\levelindent0{\leveltext\leveltemplateid67698693\'01\u-3929 ?;}{\levelnumbers;}\f10\fbias0 \fi-360\li6173\lin6173 }{\listname ;}\listid1059087720}}{\*\listoverridetable{\listoverride\listid1059087720\listoverridecount0\ls1}{\listoverride\listid814688723
\listoverridecount0\ls2}}{\*\rsidtbl \rsid82840\rsid216852\rsid594039\rsid730048\rsid797851\rsid1008725\rsid1064640\rsid1333176\rsid1380622\rsid1406779\rsid1533862\rsid1669360\rsid1862259\rsid1995447\rsid2192916\rsid2325461\rsid2492522\rsid3159125
\rsid3358679\rsid3671002\rsid3883046\rsid3933264\rsid3999267\rsid4072033\rsid4546952\rsid4666016\rsid4811817\rsid4929027\rsid5196451\rsid5659843\rsid5791842\rsid6688712\rsid6690369\rsid6706598\rsid6759564\rsid6772275\rsid6949393\rsid7029204\rsid7218709
\rsid7359131\rsid7938219\rsid7949931\rsid8327252\rsid8602437\rsid8654681\rsid8745576\rsid8805213\rsid8990660\rsid9379705\rsid9394705\rsid9521059\rsid9777269\rsid9913343\rsid10035144\rsid10048994\rsid10228202\rsid10506949\rsid10555684\rsid10710116
\rsid10761025\rsid10907759\rsid11019763\rsid11095692\rsid11362833\rsid11413282\rsid11544899\rsid11611762\rsid11828137\rsid11955928\rsid12075670\rsid12322245\rsid12407842\rsid13240233\rsid13248007\rsid13252155\rsid13632686\rsid13658677\rsid13896658
\rsid13897734\rsid14026533\rsid14098649\rsid14122374\rsid14306713\rsid14552026\rsid14566738\rsid14705201\rsid15025095\rsid15038624\rsid15228519\rsid15480351\rsid15544730\rsid15607267\rsid15610434\rsid15796680\rsid15822257\rsid15874313\rsid16143249
\rsid16337355\rsid16386796\rsid16403650}{\mmathPr\mmathFont34\mbrkBin0\mbrkBinSub0\msmallFrac0\mdispDef1\mlMargin0\mrMargin0\mdefJc1\mwrapIndent1440\mintLim0\mnaryLim1}{\info{\author Eelco}{\operator Eelco}{\creatim\yr2012\mo10\dy8\min2}
{\revtim\yr2012\mo10\dy22\hr17\min22}{\version10}{\edmins131}{\nofpages9}{\nofwords3593}{\nofchars20484}{\nofcharsws24029}{\vern49275}}{\*\xmlnstbl {\xmlns1 http://schemas.microsoft.com/office/word/2003/wordml}}
\paperw12240\paperh15840\margl1440\margr1440\margt1440\margb1440\gutter0\ltrsect 
\widowctrl\ftnbj\aenddoc\trackmoves0\trackformatting1\donotembedsysfont1\relyonvml0\donotembedlingdata0\grfdocevents0\validatexml1\showplaceholdtext0\ignoremixedcontent0\saveinvalidxml0\showxmlerrors1\noxlattoyen
\expshrtn\noultrlspc\dntblnsbdb\nospaceforul\formshade\horzdoc\dgmargin\dghspace180\dgvspace180\dghorigin1440\dgvorigin1440\dghshow1\dgvshow1
\jexpand\viewkind1\viewscale106\pgbrdrhead\pgbrdrfoot\splytwnine\ftnlytwnine\htmautsp\nolnhtadjtbl\useltbaln\alntblind\lytcalctblwd\lyttblrtgr\lnbrkrule\nobrkwrptbl\snaptogridincell\allowfieldendsel\wrppunct
\asianbrkrule\rsidroot13658677\newtblstyruls\nogrowautofit\usenormstyforlist\noindnmbrts\felnbrelev\nocxsptable\indrlsweleven\noafcnsttbl\afelev\utinl\hwelev\spltpgpar\notcvasp\notbrkcnstfrctbl\notvatxbx\krnprsnet\cachedcolbal \nouicompat \fet0
{\*\wgrffmtfilter 2450}\nofeaturethrottle1\ilfomacatclnup0{\*\ftnsep \ltrpar \pard\plain \ltrpar\ql \li0\ri0\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid3933264 \rtlch\fcs1 \af0\afs22\alang1025 \ltrch\fcs0 
\f31506\fs22\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid15038624 \chftnsep 
\par }}{\*\ftnsepc \ltrpar \pard\plain \ltrpar\ql \li0\ri0\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid3933264 \rtlch\fcs1 \af0\afs22\alang1025 \ltrch\fcs0 \f31506\fs22\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid15038624 \chftnsepc 
\par }}{\*\aftnsep \ltrpar \pard\plain \ltrpar\ql \li0\ri0\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid3933264 \rtlch\fcs1 \af0\afs22\alang1025 \ltrch\fcs0 \f31506\fs22\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid15038624 \chftnsep 
\par }}{\*\aftnsepc \ltrpar \pard\plain \ltrpar\ql \li0\ri0\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid3933264 \rtlch\fcs1 \af0\afs22\alang1025 \ltrch\fcs0 \f31506\fs22\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid15038624 \chftnsepc 
\par }}\ltrpar \sectd \ltrsect\linex0\endnhere\sectlinegrid360\sectdefaultcl\sftnbj {\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl2\pnucltr\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang 
{\pntxta .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang {\pntxta )}}{\*\pnseclvl5\pndec\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl6\pnlcltr\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl7
\pnlcrm\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl8\pnlcltr\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}\pard\plain \ltrpar\s16\ql \li0\ri0\sa300\widctlpar
\brdrb\brdrs\brdrw20\brsp80\brdrcf17 \wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid13658677\contextualspace \rtlch\fcs1 \af0\afs52\alang1025 \ltrch\fcs0 
\fs52\expnd1\expndtw5\cf18\lang1033\langfe1033\kerning28\loch\af31502\hich\af31502\dbch\af31501\cgrid\langnp1033\langfenp1033 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid11019763 \hich\af31502\dbch\af31501\loch\f31502 ThreadW}{\rtlch\fcs1 \af0 \ltrch\fcs0 
\insrsid13658677 \hich\af31502\dbch\af31501\loch\f31502 eave }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid11019763 
\par }\pard\plain \ltrpar\s2\ql \li0\ri0\sb200\sl276\slmult1\keep\keepn\widctlpar\wrapdefault\aspalpha\aspnum\faauto\outlinelevel1\adjustright\rin0\lin0\itap0\pararsid11019763 \rtlch\fcs1 \ab\af0\afs26\alang1025 \ltrch\fcs0 
\b\fs26\cf17\lang1033\langfe1033\loch\af31502\hich\af31502\dbch\af31501\cgrid\langnp1033\langfenp1033 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid11019763 \hich\af31502\dbch\af31501\loch\f31502 I}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid15796680 
\hich\af31502\dbch\af31501\loch\f31502 ntroduction}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13658677 
\par }\pard\plain \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid13658677 \rtlch\fcs1 \af0\afs22\alang1025 \ltrch\fcs0 \f31506\fs22\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid11019763 In a nutshell, ThreadW}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13658677 eave aims to bring the }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid11019763 type of }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13658677 
functionality found}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid7029204  in scipy.weave to the GPU, or S}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13658677 IMD architect}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid11019763 ures, more generally. That is, ThreadW}{
\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13658677 eave allows one to write concise i}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid3671002 nline S}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid11095692 IMD kernels directly in P}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13658677 
ython, while providing both complete imperative backwards compatibility, as well as }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid15610434 a useful set of}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13658677  higher level abstractions.
\par }\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid6688712 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid6688712 
Most significantly, nd-arrays are first class citizens of the ThreadWeave world. They can be passed around, indexed, have their attributes read, and have boundary handling modes applied to them, all within the kernel.
\par }\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid13658677 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid1008725 An example says more than a thousand words, so here are two short ones:

\par \ltrrow}\trowd \irow0\irowband0\lastrow \ltrrow\ts18\trgaph115\trleft-115\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\trftsWidth1\trftsWidthB3\trautofit1\trpaddl115\trpaddt115\trpaddb115\trpaddr115\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3\tblrsid14566738\tbllkhdrrows\tbllkhdrcols\tbllknocolband\tblind0\tblindtype3 \clvertalc\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 
\clbrdrb\brdrs\brdrw10 \clbrdrr\brdrs\brdrw10 \cltxlrtb\clftsWidth3\clwWidth9576\clshdrawnil \cellx9461\pard\plain \ltrpar\s21\ql \li0\ri0\widctlpar\intbl\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\pararsid6759564\yts18 \rtlch\fcs1 
\af0\afs22\alang1025 \ltrch\fcs0 \f31506\fs22\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\rtlch\fcs1 \af2\afs16 \ltrch\fcs0 \f2\fs16\insrsid6759564\charrsid6759564 import numpy as np
\par from threadweave.backend import OpenCL as Backend
\par from threadweave.stencil import laplacian
\par 
\par with Backend.Context(device = 0) as ctx:
\par 
\par     laplacian_kernel = ctx.kernel("""
\par         (<type>[d,n,m] output) << [d,n,m] << (<type>[d,n,m] input):
\par             n:      serial
\par             d:      variable
\par             input:  padded(stencil)
\par         \{
\par             <type> r = 0;
\par             for (s in stencil(input))
\par                  r += input(s.d,s.n,s.m) * s.weight;
\par             output(d,n,m) = r;
\par         \}""")
\par 
\par     shape = (2,6,6)
\par     input = ctx.array(np.arange(np.prod(shape)).astype(np.float32).reshape(shape) ** 2)
\par     print input    #some arbitrary input data
\par 
\par     stencil = laplacian(2,5)[np.newaxis,:,:] #construct 2-dim 5-pts laplacian, with broadcasting
\par     output = laplacian_kernel(input, stencil = stencil)
\par     print output}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid7359131 \cell }\pard\plain \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\widctlpar\intbl\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0 \rtlch\fcs1 \af0\afs22\alang1025 \ltrch\fcs0 
\f31506\fs22\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid14566738 \trowd \irow0\irowband0\lastrow \ltrrow\ts18\trgaph115\trleft-115\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr
\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\trftsWidth1\trftsWidthB3\trautofit1\trpaddl115\trpaddt115\trpaddb115\trpaddr115\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3\tblrsid14566738\tbllkhdrrows\tbllkhdrcols\tbllknocolband\tblind0\tblindtype3 \clvertalc\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 
\clbrdrb\brdrs\brdrw10 \clbrdrr\brdrs\brdrw10 \cltxlrtb\clftsWidth3\clwWidth9576\clshdrawnil \cellx9461\row }\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid13658677 {
\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid14566738 
\par }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid14098649 Without going into the details; t}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid1008725 his example shows the declaration and invocation of a }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid7938219 Laplacian}{\rtlch\fcs1 
\af0 \ltrch\fcs0 \insrsid1008725  filter applied to a stack of 2d arrays}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid7938219 ; these }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid14566738 few}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid7938219  lines of code are conv}{
\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid11019763 erted into 70 lines of}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid3999267  dense}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid11019763  CUDA or O}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid7938219 
penCL boilerplate. Of course good libraries exist}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid11019763  already to perform convolutions; }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid3883046 the added value, aside from demonstration purposes, is that}{\rtlch\fcs1 
\af0 \ltrch\fcs0 \insrsid11019763  ThreadW}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid7938219 eave allows for greatly expanded flexibility}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid10907759 .}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid797851 
 By acting on a stack of 2d arrays, we can expose additional parallelism, and we have full control over boundary handling, as well as }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid14566738 the way in which axes are iterated over.}{\rtlch\fcs1 \af0 \ltrch\fcs0 
\insrsid2192916  Also, the iteration over the stencil is }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid14026533 transparently}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid2192916  unrolled.}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid1008725 
\par }\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid14566738 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid10907759 Aside from eliminating boilerplate}{\rtlch\fcs1 \af0 \ltrch\fcs0 
\insrsid82840  from imperative C code}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid10907759 , }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid6688712 the functionality at the core of }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid10907759 ThreadWeave also makes }{\rtlch\fcs1 
\af0 \ltrch\fcs0 \insrsid6688712 for }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid10907759 a good platform for building higher level abstractions:}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid14566738 
\par \ltrrow}\pard\plain \ltrpar\s21\ql \li0\ri0\widctlpar\intbl\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\pararsid9913343\yts18 \rtlch\fcs1 \af0\afs22\alang1025 \ltrch\fcs0 \f31506\fs22\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\rtlch\fcs1 \af2\afs16 \ltrch\fcs0 \f2\fs16\insrsid9913343\charrsid9913343 import numpy as np
\par from threadweave.backend import CUDA as Backend
\par 
\par with Backend.Context(device = 0) as ctx:
\par     #some example data
\par     shape = 2,3,4
\par     A = ctx.arange(np.prod(shape),np.float32).reshape(shape)
\par     shape = 2,4,3
\par     B = ctx.arange(np.prod(shape),np.float32).reshape(shape)
\par 
\par     #declare product, contracted over j
\par     stacked_matrix_product = ctx.tensor_product('nij,njk->nik')
\par     C = stacked_matrix_product(A, B)
\par 
\par     print C
\par }{\rtlch\fcs1 \af2\afs16 \ltrch\fcs0 \f2\fs16\insrsid11955928     print ctx.tensor_}{\rtlch\fcs1 \af2\afs16 \ltrch\fcs0 \f2\fs16\insrsid9913343\charrsid9913343 product('nii->ni')(C)   #print the diagonals of C too, for good measure}{\rtlch\fcs1 
\af2\afs16 \ltrch\fcs0 \f2\fs16\insrsid8990660\charrsid8990660 \cell }\pard\plain \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\widctlpar\intbl\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0 \rtlch\fcs1 \af0\afs22\alang1025 \ltrch\fcs0 
\f31506\fs22\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid14566738 \trowd \irow0\irowband0\lastrow \ltrrow\ts18\trgaph115\trleft-115\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr
\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\trftsWidth1\trftsWidthB3\trautofit1\trpaddl115\trpaddt115\trpaddb115\trpaddr115\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3\tblrsid9777269\tbllkhdrrows\tbllkhdrcols\tbllknocolband\tblind0\tblindtype3 \clvertalc\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 
\clbrdrb\brdrs\brdrw10 \clbrdrr\brdrs\brdrw10 \cltxlrtb\clftsWidth3\clwWidth9576\clshdrawnil \cellx9461\row }\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid14566738 {
\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid14566738 
\par }\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid13658677 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid10907759 
This short example declares and invokes a contracting tensor product; more specifically, it mult}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid9521059 iplies a stack of matrices. The}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid10907759  function}{\rtlch\fcs1 \af0 
\ltrch\fcs0 \insrsid9521059  ctx.}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid7359131 tensor_}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid9521059 prod}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid7359131 uct}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid10907759 
 is a work-alike of }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13248007 the invaluable }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid3883046 numpy.einsum}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid6949393 , and can be used to concisely express inner 
products, outer products, diagonal }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid8654681 extractions}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid6949393 , transposes, and any other }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid15610434 
operation which can be expressed as a tensor product}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid14026533  with Einstein summation convention}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid15610434 .}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid2192916 
\par }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid7949931 By building on top of the abstractions }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid15610434 at the core of}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid7949931  Threa}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid11019763 d}{
\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid1380622 Weave, the}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid7949931  functionality }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid1380622 in ctx.}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid7359131\charrsid7359131  }{\rtlch\fcs1 \af0 
\ltrch\fcs0 \insrsid7359131 tensor_product }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid7949931 can be implemented in }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid797851 just }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid7949931 a handful of lines.}{\rtlch\fcs1 \af0 
\ltrch\fcs0 \insrsid11019763  (in its current }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid14026533 fully }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid11019763 functional }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid797851 yet}{\rtlch\fcs1 \af0 \ltrch\fcs0 
\insrsid11019763  }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid7359131 suboptimal}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid11019763  form, that is)}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid2192916 . }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid4811817 
\par To give an impression of how this happens: b}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid2192916 oth tensor_product and laplacian_kernel have the same type; KernelFactory, which wraps a KernelDeclaration and a }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid3999267 
cache}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid2192916  of compiled KernelInstances, which are created by letting a backend specific CodeGenerator act on a KernelDeclaration}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid3999267  for a given set of template arguments
}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid2192916 . }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid10228202 
\par }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13248007 You get the idea; quite a few}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid4811817  of the same}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13248007  things going on behind the scenes}{\rtlch\fcs1 \af0 \ltrch\fcs0 
\insrsid14098649 , }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid4811817 which are identical for both examples}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13248007 .}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid4811817  T}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid2192916 
he methods Context.prod and Context.kernel }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid3999267 merely wrap}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid2192916  two different front-ends for parsing }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid11095692 their respective}{
\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid2192916  }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid11095692 grammars}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid2192916  into a KernelDeclaration; many more }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid3999267 can}{\rtlch\fcs1 \af0 
\ltrch\fcs0 \insrsid2192916  be }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid3999267 created with relatively little effort }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid2192916 to cater to specific wants.}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid3999267 
 This frees one from grave discussions, with oneself or others, over syntactical details; if your problem domain asks for }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid10228202 different}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid3999267  syntax, }{\rtlch\fcs1 \af0 
\ltrch\fcs0 \insrsid4072033 it should be easy to implement on top of ThreadWeave}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid3999267 .}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid10907759 
\par }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid7949931 
\par }\pard\plain \ltrpar\s2\ql \li0\ri0\sb200\sl276\slmult1\keep\keepn\widctlpar\wrapdefault\aspalpha\aspnum\faauto\outlinelevel1\adjustright\rin0\lin0\itap0\pararsid11019763 \rtlch\fcs1 \ab\af0\afs26\alang1025 \ltrch\fcs0 
\b\fs26\cf17\lang1033\langfe1033\loch\af31502\hich\af31502\dbch\af31501\cgrid\langnp1033\langfenp1033 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid7949931 \hich\af31502\dbch\af31501\loch\f31502 Feature }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid82840 
\hich\af31502\dbch\af31501\loch\f31502 summary}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid7949931 
\par }\pard\plain \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11019763 \rtlch\fcs1 \af0\afs22\alang1025 \ltrch\fcs0 \f31506\fs22\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid14098649 Here is a concise listing of the core features that ThreadWeave provides at present.}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid11019763\charrsid11019763 
\par {\listtext\pard\plain\ltrpar \s15 \rtlch\fcs1 \af0\afs22 \ltrch\fcs0 \f37\fs22\insrsid7949931 \hich\af37\dbch\af0\loch\f37 -\tab}}\pard\plain \ltrpar\s15\ql \fi-360\li413\ri0\sa200\sl276\slmult1
\widctlpar\wrapdefault\aspalpha\aspnum\faauto\ls1\adjustright\rin0\lin413\itap0\pararsid7949931\contextualspace \rtlch\fcs1 \af0\afs22\alang1025 \ltrch\fcs0 \f31506\fs22\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\rtlch\fcs1 \af0 \ltrch\fcs0 
\insrsid7949931 Nd-array awareness}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid14098649 :}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid7949931 
\par {\listtext\pard\plain\ltrpar \s15 \rtlch\fcs1 \af0\afs22 \ltrch\fcs0 \f2\fs22\insrsid11019763 \hich\af2\dbch\af0\loch\f2 o\tab}}\pard \ltrpar\s15\ql \fi-360\li1133\ri0\sa200\sl276\slmult1
\widctlpar\wrapdefault\aspalpha\aspnum\faauto\ls1\ilvl1\adjustright\rin0\lin1133\itap0\pararsid11019763\contextualspace {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid11019763 Pass}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid4072033 ing}{\rtlch\fcs1 \af0 \ltrch\fcs0 
\insrsid11019763  nd-arrays in and out of }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid1064640 kernels}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid11019763 
\par {\listtext\pard\plain\ltrpar \s15 \rtlch\fcs1 \af0\afs22 \ltrch\fcs0 \f2\fs22\insrsid11019763 \hich\af2\dbch\af0\loch\f2 o\tab}Indexing of nd-arrays
\par {\listtext\pard\plain\ltrpar \s15 \rtlch\fcs1 \af0\afs22 \ltrch\fcs0 \f2\fs22\insrsid3933264 \hich\af2\dbch\af0\loch\f2 o\tab}}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid3933264 Various boundary handling modes (padded, wrapped, clamped, fixed)
\par {\listtext\pard\plain\ltrpar \s15 \rtlch\fcs1 \af0\afs22 \ltrch\fcs0 \f2\fs22\insrsid11019763 \hich\af2\dbch\af0\loch\f2 o\tab}}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid11019763 Accessing of }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid797851 
array attributes such as shape with numpythonic syntax.}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid11019763 
\par {\listtext\pard\plain\ltrpar \s15 \rtlch\fcs1 \af0\afs22 \ltrch\fcs0 \f37\fs22\insrsid9521059 \hich\af37\dbch\af0\loch\f37 -\tab}}\pard \ltrpar\s15\ql \fi-360\li413\ri0\sa200\sl276\slmult1
\widctlpar\wrapdefault\aspalpha\aspnum\faauto\ls1\adjustright\rin0\lin413\itap0\pararsid9521059\contextualspace {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid9521059 Axes:
\par {\listtext\pard\plain\ltrpar \s15 \rtlch\fcs1 \af0\afs22 \ltrch\fcs0 \f2\fs22\insrsid9521059 \hich\af2\dbch\af0\loch\f2 o\tab}}\pard \ltrpar\s15\ql \fi-360\li1133\ri0\sa200\sl276\slmult1
\widctlpar\wrapdefault\aspalpha\aspnum\faauto\ls1\ilvl1\adjustright\rin0\lin1133\itap0\pararsid9521059\contextualspace {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid9521059 Declaratively relate kernel and array axes to one another}{\rtlch\fcs1 \af0 \ltrch\fcs0 
\insrsid15822257 . This gives a highly flexible and compact notation.}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid9521059 
\par {\listtext\pard\plain\ltrpar \s15 \rtlch\fcs1 \af0\afs22 \ltrch\fcs0 \f2\fs22\insrsid15822257 \hich\af2\dbch\af0\loch\f2 o\tab}}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid15822257 Decoupling 
between the grid of work items to be performed, and the grid of threads that perform them}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid4929027 . This allows us to overcome hardware limitations on threadgrids, but more importantly, allows one to declaratively 
optimize the relation between the work to be performed, and the arrangement of threads to accomplish this goal.}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid15822257 
\par {\listtext\pard\plain\ltrpar \s15 \rtlch\fcs1 \af0\afs22 \ltrch\fcs0 \f37\fs22\insrsid14098649 \hich\af37\dbch\af0\loch\f37 -\tab}}\pard \ltrpar\s15\ql \fi-360\li413\ri0\sa200\sl276\slmult1
\widctlpar\wrapdefault\aspalpha\aspnum\faauto\ls1\adjustright\rin0\lin413\itap0\pararsid14098649\contextualspace {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid14098649 Runtime features:
\par {\listtext\pard\plain\ltrpar \s15 \rtlch\fcs1 \af0\afs22 \ltrch\fcs0 \f2\fs22\insrsid14098649 \hich\af2\dbch\af0\loch\f2 o\tab}}\pard \ltrpar\s15\ql \fi-360\li1133\ri0\sa200\sl276\slmult1
\widctlpar\wrapdefault\aspalpha\aspnum\faauto\ls1\ilvl1\adjustright\rin0\lin1133\itap0\pararsid14098649\contextualspace {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid14098649 JIT compilation of kernels}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid15796680  templat
ed on shape, type and stencil arguments}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid14098649 
\par {\listtext\pard\plain\ltrpar \s15 \rtlch\fcs1 \af0\afs22 \ltrch\fcs0 \f2\fs22\insrsid15796680 \hich\af2\dbch\af0\loch\f2 o\tab}}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid15796680 Runtime t}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid14098649 ype & shape validation}
{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid15796680  of kernel arguments}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid14098649 
\par {\listtext\pard\plain\ltrpar \s15 \rtlch\fcs1 \af0\afs22 \ltrch\fcs0 \f2\fs22\insrsid14098649 \hich\af2\dbch\af0\loch\f2 o\tab}Output shape inference and allocation (if not given to the kernel)
\par {\listtext\pard\plain\ltrpar \s15 \rtlch\fcs1 \af0\afs22 \ltrch\fcs0 \f2\fs22\insrsid14098649 \hich\af2\dbch\af0\loch\f2 o\tab}Computation of sensible defaults for grid/block parameters
\par {\listtext\pard\plain\ltrpar \s15 \rtlch\fcs1 \af0\afs22 \ltrch\fcs0 \f37\fs22\insrsid11019763\charrsid13896658 \hich\af37\dbch\af0\loch\f37 -\tab}}\pard \ltrpar\s15\ql \fi-360\li413\ri0\sa200\sl276\slmult1
\widctlpar\wrapdefault\aspalpha\aspnum\faauto\ls1\adjustright\rin0\lin413\itap0\pararsid13896658\contextualspace {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid11019763\charrsid13896658 
Abstracting away the differences between different backends; they can be switched out by}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid11019763  changing a single import. As of now, CUDA and OpenCL are supported.}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid3933264 
 This applies to both the }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid4929027 Python side of things, where ThreadPy }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid3933264 
presents a uniform interface, as well as papering over the superficial syntactical differences between the two}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid82840  C-dialects}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid3933264 , like atomicAdd }{\rtlch\fcs1 \af0 
\ltrch\fcs0 \insrsid3883046 / }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid3933264 atomic_add.}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid82840  }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13896658\charrsid4072033 
\par }\pard\plain \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid13658677 \rtlch\fcs1 \af0\afs22\alang1025 \ltrch\fcs0 \f31506\fs22\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid11019763 
\par }\pard\plain \ltrpar\s2\ql \li0\ri0\sb200\sl276\slmult1\keep\keepn\widctlpar\wrapdefault\aspalpha\aspnum\faauto\outlinelevel1\adjustright\rin0\lin0\itap0\pararsid11019763 \rtlch\fcs1 \ab\af0\afs26\alang1025 \ltrch\fcs0 
\b\fs26\cf17\lang1033\langfe1033\loch\af31502\hich\af31502\dbch\af31501\cgrid\langnp1033\langfenp1033 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid1380622 \hich\af31502\dbch\af31501\loch\f31502 ThreadWeave }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid4929027 
\hich\af31502\dbch\af31501\loch\f31502 Concepts}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid11019763 
\par }\pard\plain \ltrpar\s3\ql \li0\ri0\sb200\sl276\slmult1\keep\keepn\widctlpar\wrapdefault\aspalpha\aspnum\faauto\outlinelevel2\adjustright\rin0\lin0\itap0\pararsid11828137 \rtlch\fcs1 \ab\af0\afs22\alang1025 \ltrch\fcs0 
\b\fs22\cf17\lang1033\langfe1033\loch\af31502\hich\af31502\dbch\af31501\cgrid\langnp1033\langfenp1033 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid4929027 \hich\af31502\dbch\af31501\loch\f31502 Nd-arrays}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid11828137 
\par }\pard\plain \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid2492522 \rtlch\fcs1 \af0\afs22\alang1025 \ltrch\fcs0 \f31506\fs22\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid2492522 
The two primary SIMD languages, CUDA and OpenCL, are both C dialects, which is the natural choice in many ways. However, C was never designed with SIMD in mind; and although both dialects offer some abstractions for dealing with multiple threads, one is l
e
ft with the minimal array abstractions C offers for the multiple data part of the equation. By extending C with nd-array capabilities, we not only gain the immediate benefits of this tried and true abstraction, but it also enables the introduction of nove
l concepts, aimed at harnassing the typically tight relationship between the grid of threads and the data they act on.
\par }\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11828137 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid11828137 
ThreadWeave facilitates working with nd-arrays both within the kernel code, as well as during declaration and invocation.
\par In order to }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid11362833 provide }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid14705201 access to arrays within the kernel}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid11362833 , a p}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid11828137 
ointer to}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid11362833  the device}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid11828137  memory }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid11362833 is passed into the kernel}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid14705201  (shocker)
}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid11362833 . In addition, }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid11828137 all shape information is either passed into the kernel at compile time or runtime. This information is then used to compute all strides
, which in turn is used to provide }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid14705201 clean syntax for }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid11828137 indexation of nd-arrays. All the array properties passed into or computed within the kernel are accessible 
}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid11362833 within the kernel by means of numpythonic syntax.}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid11828137 
\par }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid1406779 Each }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid7218709 array}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid1406779  axi}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid14705201 s can be given a boundary handling mode.}{
\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid16143249  By default, array access is not bounds checked. But when working with stencil operations}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid1406779  for instance}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid16143249 
, one needs a consistent way of handling array boundaries. All typical boundary handling modes are planned functionality (clamped, fixed, reflected
); for now, ThreadWeave only supports wrapped boundaries, and padded boundaries. By marking an array as padded (with a given stencil)}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid1406779 , it is treated as a view upon a larger array}{\rtlch\fcs1 \af0 
\ltrch\fcs0 \insrsid1380622  (}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid7218709 with enough padding }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid1380622 such that all }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid7218709 access}{\rtlch\fcs1 \af0 \ltrch\fcs0 
\insrsid1380622  through the stencil }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid7218709 is}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid1380622  safe)}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid1406779 . This is both a very }{\rtlch\fcs1 \af0 \ltrch\fcs0 
\insrsid12407842 flexible}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid1406779  way of specifying boundary conditions, and it is the most efficient in terms of overhead}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid12407842  inside the kernel.}{\rtlch\fcs1 \af0 
\ltrch\fcs0 \insrsid14705201\charrsid3358679 
\par }\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid13896658 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid11362833 At the moment,}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid11828137 
 only C-contiguous }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid11362833 arrays are supported (plus a restricted notion of views on these, in the form of }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid11828137 padded arrays). Support for arbitrary strides would be }{
\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid11362833 nice}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid11828137  to have, but }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid11362833 the nd-array classes included in the current stable }{\rtlch\fcs1 \af0 \ltrch\fcs0 
\insrsid1995447 branch}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid11362833  of pycuda and pyopencl do not support such. }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid7218709 This functionality i}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid1380622 
s however around the corner}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid11362833 , in the form on the package compyte, which provides a closer analogue of numpy\rquote s ndarray, with a shared code base between pycuda and pyopencl. It\rquote s}{\rtlch\fcs1 
\af0 \ltrch\fcs0 \insrsid11828137  probably best to wait for the public release of compyte}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid7218709  and its integration into pycuda/pyopencl}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid11828137  rather than reinventing that
 wheel.
\par }\pard\plain \ltrpar\s3\ql \li0\ri0\sb200\sl276\slmult1\keep\keepn\widctlpar\wrapdefault\aspalpha\aspnum\faauto\outlinelevel2\adjustright\rin0\lin0\itap0\pararsid10506949 \rtlch\fcs1 \ab\af0\afs22\alang1025 \ltrch\fcs0 
\b\fs22\cf17\lang1033\langfe1033\loch\af31502\hich\af31502\dbch\af31501\cgrid\langnp1033\langfenp1033 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid797851 \hich\af31502\dbch\af31501\loch\f31502 Kernels}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid8654681 
\hich\af31502\dbch\af31501\loch\f31502  and}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid4929027 \hich\af31502\dbch\af31501\loch\f31502  axes}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid10506949 
\par }\pard\plain \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid10506949 \rtlch\fcs1 \af0\afs22\alang1025 \ltrch\fcs0 \f31506\fs22\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid10761025 In ThreadWeave, kernels are declared as having an arbitrary number of }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid12322245 axes, with these axes spanning a grid of repetitive work items}{\rtlch\fcs1 \af0 
\ltrch\fcs0 \insrsid4811817 , which all have the same kernel body applied to them}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid12322245 . }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid1380622 As opposed to the typical }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid8745576 S}{
\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid7218709 IMD }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid1380622 model, n}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid12322245 ot a
ll these work items are necessarily performed in parallel; many kernels benefit from having a thread act serially along an axis, such as to minimize thread launch overhead, and maximize reuse of computed terms which are }{\rtlch\fcs1 \af0 \ltrch\fcs0 
\insrsid11362833 constant}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid12322245  between work items.}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid8654681  }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid8745576 This is opposed to the }{\rtlch\fcs1 \af0 \ltrch\fcs0 
\insrsid1533862 CUDA/OpenCL}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid8745576  model, where the kernel grid has a one to one mapping to a grid of physical threads.}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid11362833 
\par }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid8654681 An axis 
can have its iteration type set to serial, parallel, or hybrid iteration, with the latter meaning the work items along the axes are divided among a number of threads, each of which having responsibility for }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid11828137 
looping over a part of the axis, and the other two iteration modes denoting the logical extremes of that scenario.}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid11362833  }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid8654681 By being able to declaratively change an axis
\rquote  }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid1380622 iteration }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid8654681 behavior, one can rapidly find a balance between}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid11828137  the benefits of}{\rtlch\fcs1 \af0 
\ltrch\fcs0 \insrsid8654681  exposing parallelism}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid4811817  and its drawbacks}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid8654681 , without rewriting a single line of kernel }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid11828137 
body }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid8654681 code.
\par }\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid797851 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid4811817 Within a kernel declaration, we can create size }{\rtlch\fcs1 \af0 
\ltrch\fcs0 \insrsid11611762 relations}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid4811817  between kernel axes and array axes. This allows the kernel shape and output arguments\rquote  shape to be deduced from the input arguments\rquote  shape. }{\rtlch\fcs1 
\af0 \ltrch\fcs0 \insrsid11611762 In typical use}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid4811817 , }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid1533862 most array axes are}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid4811817 
 directly related to a kernel axis in this manner.}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid797851 
\par }\pard\plain \ltrpar\s3\ql \li0\ri0\sb200\sl276\slmult1\keep\keepn\widctlpar\wrapdefault\aspalpha\aspnum\faauto\outlinelevel2\adjustright\rin0\lin0\itap0\pararsid797851 \rtlch\fcs1 \ab\af0\afs22\alang1025 \ltrch\fcs0 
\b\fs22\cf17\lang1033\langfe1033\loch\af31502\hich\af31502\dbch\af31501\cgrid\langnp1033\langfenp1033 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid797851 \hich\af31502\dbch\af31501\loch\f31502 Stencil operations
\par }\pard\plain \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid3358679 \rtlch\fcs1 \af0\afs22\alang1025 \ltrch\fcs0 \f31506\fs22\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid3358679 Stencil operations are a staple of GPU computing, and as such, }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid14705201 ThreadWeave attempts to accommodate }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid11611762 them}{
\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid14705201 .}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid12407842  Most importantly, ThreadWeave supports special syntax for iterating over (unrolled) stencils. The syntax is }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid11611762 
\lquote for (voxel_id in stencil_id)\rquote }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid12407842 , where any properties of the individual voxels of a stencil can be accessed through the loop dummy variable, as in voxel_id.weight, for instance.}{\rtlch\fcs1 
\af0 \ltrch\fcs0 \insrsid14705201 
\par For a comprehensive hands on tutorial of stencil operations in ThreadWeave, s}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid4811817 ee the }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid14705201 watershed }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid4811817 segmentation }{
\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid14705201 unit}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid4811817 test in the source.}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid3358679\charrsid3358679 
\par }\pard\plain \ltrpar\s3\ql \li0\ri0\sb200\sl276\slmult1\keep\keepn\widctlpar\wrapdefault\aspalpha\aspnum\faauto\outlinelevel2\adjustright\rin0\lin0\itap0\pararsid11362833 \rtlch\fcs1 \ab\af0\afs22\alang1025 \ltrch\fcs0 
\b\fs22\cf17\lang1033\langfe1033\loch\af31502\hich\af31502\dbch\af31501\cgrid\langnp1033\langfenp1033 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid4929027 \hich\af31502\dbch\af31501\loch\f31502 Context objects}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid11362833 

\par }\pard\plain \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11362833 \rtlch\fcs1 \af0\afs22\alang1025 \ltrch\fcs0 \f31506\fs22\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid11362833 ThreadWeave adds a thin wrapper around native pycuda/pyopencl context objects. This is useful for abstracting away }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid14705201 some of }{\rtlch\fcs1 \af0 \ltrch\fcs0 
\insrsid11362833 the superficial differences between the two, as well as }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid14705201 hiding some of their rather C-like characteristics behind }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid12407842 a more}{\rtlch\fcs1 \af0 
\ltrch\fcs0 \insrsid14705201  pythonic}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid12407842  interface}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid14705201 
. This context object aims to be a work-alike of the numpy namespace, providing a comprehensive toolbox of functionality in a familiar interface. }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid15796680 For more information, see ThreadPy.}{\rtlch\fcs1 \af0 
\ltrch\fcs0 \insrsid11362833\charrsid11362833 
\par }\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid13658677 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13658677 
\par }\pard\plain \ltrpar\s2\ql \li0\ri0\sb200\sl276\slmult1\keep\keepn\widctlpar\wrapdefault\aspalpha\aspnum\faauto\outlinelevel1\adjustright\rin0\lin0\itap0\pararsid3883046 \rtlch\fcs1 \ab\af0\afs26\alang1025 \ltrch\fcs0 
\b\fs26\cf17\lang1033\langfe1033\loch\af31502\hich\af31502\dbch\af31501\cgrid\langnp1033\langfenp1033 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid4929027 \hich\af31502\dbch\af31501\loch\f31502 Frontend Syntax}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid3883046 

\par }\pard\plain \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid12407842 \rtlch\fcs1 \af0\afs22\alang1025 \ltrch\fcs0 \f31506\fs22\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid12407842 ThreadWeave at present supports }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid15796680 several}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid12407842  front-end syntaxes for }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid15796680 
accessing}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid12407842  its functionality; a general imperative syntax}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid15796680 
, which allows for the most flexibility, and two more derived ways of declaring stencils, for pure elementwise kernels and tensor products.}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid12407842\charrsid12407842 
\par }\pard\plain \ltrpar\s3\ql \li0\ri0\sb200\sl276\slmult1\keep\keepn\widctlpar\wrapdefault\aspalpha\aspnum\faauto\outlinelevel2\adjustright\rin0\lin0\itap0\pararsid3883046 \rtlch\fcs1 \ab\af0\afs22\alang1025 \ltrch\fcs0 
\b\fs22\cf17\lang1033\langfe1033\loch\af31502\hich\af31502\dbch\af31501\cgrid\langnp1033\langfenp1033 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid15796680 \hich\af31502\dbch\af31501\loch\f31502 General i}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid12407842 
\hich\af31502\dbch\af31501\loch\f31502 mperative syntax}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid3883046 
\par }\pard\plain \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid10228202 \rtlch\fcs1 \af0\afs22\alang1025 \ltrch\fcs0 \f31506\fs22\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid12407842 The imperative syntax is largely }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid8327252 familiar }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid12407842 C code, with some extensions.}{\rtlch\fcs1 \af0 \ltrch\fcs0 
\insrsid15544730  The most visible difference is in the signature of the kernel declaration.}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid11611762  Fully writing out al
l details of this syntax is more cluttered than just reading the relevant parser definitions in the source}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid8327252  (which is quite concise and readable, thanks to pyparsing)}{\rtlch\fcs1 \af0 \ltrch\fcs0 
\insrsid11611762 , and arguably the syntax is most easily grasped by looking at the examples, but nonetheless, a coarse description of the syntax is given here.}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid12407842 
\par }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid15544730 The global structure of the syntax is thus}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid10228202 :}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid8654681  }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid15544730 
\par }{\rtlch\fcs1 \af2\afs16 \ltrch\fcs0 \f2\fs16\insrsid15544730\charrsid1533862 Colon_terminated_signature_line:
\par }\pard \ltrpar\ql \fi720\li0\ri0\sa200\sl276\slmult1\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid15544730 {\rtlch\fcs1 \af2\afs16 \ltrch\fcs0 \f2\fs16\insrsid15544730\charrsid1533862 Indented_annotations_block
\par }\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid15544730 {\rtlch\fcs1 \af2\afs16 \ltrch\fcs0 \f2\fs16\insrsid15544730\charrsid1533862 Curly_braced_}{\rtlch\fcs1 \af2\afs16 
\ltrch\fcs0 \f2\fs16\insrsid8654681\charrsid1533862 body}{\rtlch\fcs1 \af2\afs16 \ltrch\fcs0 \f2\fs16\insrsid10228202\charrsid1533862 
\par }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid15544730 The signature has the following grammar:
\par }{\rtlch\fcs1 \af2 \ltrch\fcs0 \f2\insrsid15544730\charrsid1533862 (output arguments) << [kernel axes] << (input arguments)
\par }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid15544730 Which is supposed to be read as \lquote the input arguments mapped over a kernel of the given shape yield the output arguments\rquote .
\par Kernel axis identifiers should be a single lowercase character. Constraints on the size of the axis can be written inline with their declaration.
\par Arguments have the form }{\rtlch\fcs1 \af2 \ltrch\fcs0 \f2\insrsid15544730\charrsid1533862 typename[array axes] array_identifier}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid15544730 , with an optional assignment of default values for output arguments}{
\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid8327252  (constants }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid4929027 value }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid8327252 or }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid4929027 copy of input argument}{\rtlch\fcs1 \af0 
\ltrch\fcs0 \insrsid8327252 )}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid15544730 .
\par }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid11611762 The array and axes identifiers declared in the signature can be further specified with annotations in the proceeding annotations section.}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid15544730 
\par }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid11611762 For axes, we can specify an iteration mode (serial, parallel, hybrid), and binding behavior (compile-time or run-time}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid8327252 ). By default, templated s
ize arguments bind at compile time; this leads to less arguments to pass in, and enables more compiler optimizations. However, while kernels are typically called often with the same size parameters, this need not be the case, and template arguments can be
 annotated as variable, to defer binding}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid4929027  of their size value}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid8327252  to runtime, to avoid excessive compilation overhead.}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid11611762 

\par For arrays, }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid4929027 the only possible annotation is in }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid11611762 specify}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid4929027 ing}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid11611762 
 a boundary handling method for now, but more features are planned, such the ability to specify caching behavior.
\par }\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid10228202 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid1533862 The syntax was design}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid5196451 ed}{
\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid1533862  so that the }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid14122374 signature }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid5196451 prominently}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid14122374  display}{\rtlch\fcs1 \af0 
\ltrch\fcs0 \insrsid4929027 s the important information, being}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid1533862  the public interface of the kernel, as well as lucidly summarizing the relationship between the nd-kernel and the nd-arrays it acts upon.}{
\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid14122374  }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid10228202\charrsid1533862 The annotation section defines additional properties of axes and arrays}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid1533862\charrsid1533862 
 declared on the signature line}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid10228202\charrsid1533862 . }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid5196451 It would be possible to allow }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid1533862\charrsid1533862 such annotations }
{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid5196451 to be written }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid10228202\charrsid1533862 inline with the signature}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid1533862\charrsid1533862 
, but considering the number of possible (future) keywords, this }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid14122374 could get}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid1533862\charrsid1533862  rather cluttered;}{\rtlch\fcs1 \af0 \ltrch\fcs0 
\insrsid10228202\charrsid1533862  plus these annotations are at most of secondary semantic significance; more about the how than the what.}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid10228202 
\par The last section is the kernel body. Any valid C code is valid body code, but in addition, a set of preprocessing transformations }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid8327252 are}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid10228202  applied.}{\rtlch\fcs1 
\af0 \ltrch\fcs0 \insrsid6706598  The recognized constructs are:}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid10228202 
\par {\listtext\pard\plain\ltrpar \s15 \rtlch\fcs1 \af0\afs22 \ltrch\fcs0 \f37\fs22\insrsid10228202 \hich\af37\dbch\af0\loch\f37 -\tab}}\pard\plain \ltrpar\s15\ql \fi-360\li413\ri0\sa200\sl276\slmult1
\widctlpar\wrapdefault\aspalpha\aspnum\faauto\ls1\adjustright\rin0\lin413\itap0\pararsid10228202\contextualspace \rtlch\fcs1 \af0\afs22\alang1025 \ltrch\fcs0 \f31506\fs22\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\rtlch\fcs1 \af0 \ltrch\fcs0 
\insrsid10228202 Array indexing}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid1533862  \tab (round brackets, to avoid conflicts with native C indexing)}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid10228202 
\par {\listtext\pard\plain\ltrpar \s15 \rtlch\fcs1 \af0\afs22 \ltrch\fcs0 \f37\fs22\insrsid10228202 \hich\af37\dbch\af0\loch\f37 -\tab}Array properties}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid1533862  \tab (.shape[], .strides[], .size, andsoforth)}{\rtlch\fcs1 
\af0 \ltrch\fcs0 \insrsid10228202 
\par {\listtext\pard\plain\ltrpar \s15 \rtlch\fcs1 \af0\afs22 \ltrch\fcs0 \f37\fs22\insrsid10228202 \hich\af37\dbch\af0\loch\f37 -\tab}Stencil iteration}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid1533862  \tab (\lquote for voxel_id in stencil_id) \{\}\rquote )}{
\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid10228202 
\par {\listtext\pard\plain\ltrpar \s15 \rtlch\fcs1 \af0\afs22 \ltrch\fcs0 \f37\fs22\insrsid8327252 \hich\af37\dbch\af0\loch\f37 -\tab}}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid8327252 Voxel properties\tab (voxel_id.axis_id, voxel_id.weight)
\par {\listtext\pard\plain\ltrpar \s15 \rtlch\fcs1 \af0\afs22 \ltrch\fcs0 \f37\fs22\insrsid10228202 \hich\af37\dbch\af0\loch\f37 -\tab}}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid10228202 Stencil properties}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid1533862  \tab 
(stencil_id.size <- gives number of active }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid5196451 (non-masked) }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid1533862 voxels)}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid10228202 
\par {\listtext\pard\plain\ltrpar \s15 \rtlch\fcs1 \af0\afs22 \ltrch\fcs0 \f37\fs22\insrsid10228202 \hich\af37\dbch\af0\loch\f37 -\tab}Integer range iteration}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid1533862  (\lquote for (dummy in 0:array_id.shape[1])\rquote )}{
\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid10228202 
\par {\listtext\pard\plain\ltrpar \s15 \rtlch\fcs1 \af0\afs22 \ltrch\fcs0 \f37\fs22\insrsid10228202 \hich\af37\dbch\af0\loch\f37 -\tab}Numpythonic type names}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid1533862 \tab (\lquote uint64\rquote 
 just looks so much better than \lquote unsigned long long\rquote )}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid10228202 
\par {\listtext\pard\plain\ltrpar \s15 \rtlch\fcs1 \af0\afs22 \ltrch\fcs0 \f37\fs22\insrsid10228202 \hich\af37\dbch\af0\loch\f37 -\tab}Template types}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid1533862 \tab (}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid8327252 
angle bracketed template identifiers. To be used in both body and signature}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid1533862 )}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid10228202 
\par {\listtext\pard\plain\ltrpar \s15 \rtlch\fcs1 \af0\afs22 \ltrch\fcs0 \f37\fs22\insrsid8327252 \hich\af37\dbch\af0\loch\f37 -\tab}}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid8327252 Backend-specific translations\tab 
(atomic operations, synchronization statements)}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid8327252\charrsid10228202 
\par }\pard\plain \ltrpar\s3\ql \li0\ri0\sb200\sl276\slmult1\keep\keepn\widctlpar\wrapdefault\aspalpha\aspnum\faauto\outlinelevel2\adjustright\rin0\lin0\itap0\pararsid3883046 \rtlch\fcs1 \ab\af0\afs22\alang1025 \ltrch\fcs0 
\b\fs22\cf17\lang1033\langfe1033\loch\af31502\hich\af31502\dbch\af31501\cgrid\langnp1033\langfenp1033 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid15796680 \hich\af31502\dbch\af31501\loch\f31502 E\hich\af31502\dbch\af31501\loch\f31502 lementwise }{\rtlch\fcs1 
\af0 \ltrch\fcs0 \insrsid4929027 \hich\af31502\dbch\af31501\loch\f31502 kernels}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid15796680 
\par }\pard\plain \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid15796680 \rtlch\fcs1 \af0\afs22\alang1025 \ltrch\fcs0 \f31506\fs22\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid15796680 This provides an nd-array aware, and thus broadcastable equivalent of pycuda}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid4929027 /pyopencl elementwise kernels. }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid15796680 Basic 
usage is }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid4929027 shown in the examples folder. }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid15796680\charrsid15796680 
\par }\pard\plain \ltrpar\s3\ql \li0\ri0\sb200\sl276\slmult1\keep\keepn\widctlpar\wrapdefault\aspalpha\aspnum\faauto\outlinelevel2\adjustright\rin0\lin0\itap0\pararsid3883046 \rtlch\fcs1 \ab\af0\afs22\alang1025 \ltrch\fcs0 
\b\fs22\cf17\lang1033\langfe1033\loch\af31502\hich\af31502\dbch\af31501\cgrid\langnp1033\langfenp1033 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid4929027 \hich\af31502\dbch\af31501\loch\f31502 Tensor products}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid3883046 

\par }\pard\plain \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid15796680 \rtlch\fcs1 \af0\afs22\alang1025 \ltrch\fcs0 \f31506\fs22\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid10228202 The syntax and use is entirely similar to numpy.einsum, aside from the fact that ThreadWeave employs a separate declaration and invocation stage.}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid6706598 
 The syntax is likely to be enriched in the future, for instance to cleanly specify axes size hints or iteration modes.}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid14122374  So far this function is more a demonstration of concept than something }{\rtlch\fcs1 
\af0 \ltrch\fcs0 \insrsid15796680 that is efficient in many circumstances}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid14122374 ; though non-contracting products should work well enough.}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid4929027  Again,
 basic usage is demonstrated in the examples folder.}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid15796680\charrsid10228202 
\par }\pard \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid3883046 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid3883046\charrsid3883046 
\par }\pard\plain \ltrpar\s2\ql \li0\ri0\sb200\sl276\slmult1\keep\keepn\widctlpar\wrapdefault\aspalpha\aspnum\faauto\outlinelevel1\adjustright\rin0\lin0\itap0\pararsid15228519 \rtlch\fcs1 \ab\af0\afs26\alang1025 \ltrch\fcs0 
\b\fs26\cf17\lang1033\langfe1033\loch\af31502\hich\af31502\dbch\af31501\cgrid\langnp1033\langfenp1033 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid2492522 \hich\af31502\dbch\af31501\loch\f31502 Software d}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid4929027 
\hich\af31502\dbch\af31501\loch\f31502 esign}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid82840 
\par }\pard\plain \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid15228519 \rtlch\fcs1 \af0\afs22\alang1025 \ltrch\fcs0 \f31506\fs22\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid2492522 Here is a short conceptual description of the classes in ThreadWeave}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid15228519 
\par Class }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid2492522 overview}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid15228519 :
\par {\listtext\pard\plain\ltrpar \s15 \rtlch\fcs1 \af0\afs22 \ltrch\fcs0 \f3\fs22\insrsid15228519 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard\plain \ltrpar\s15\ql \fi-360\li720\ri0\sa200\sl276\slmult1
\widctlpar\wrapdefault\aspalpha\aspnum\faauto\ls2\adjustright\rin0\lin720\itap0\pararsid2492522\contextualspace \rtlch\fcs1 \af0\afs22\alang1025 \ltrch\fcs0 \f31506\fs22\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\rtlch\fcs1 \af0 \ltrch\fcs0 
\insrsid15228519 KernelDeclaration}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid10035144 :}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid15228519  }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid10035144 C}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid15228519 
ontains all information that defines the kernel. It provides a rich set of accessor properties, such that other pieces of code that depend on it, like the CodeGenerator and runtime components, can be written in a }{\rtlch\fcs1 \af0 \ltrch\fcs0 
\insrsid10035144 readable}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid15228519  and safe manner. Also, it presents an interface for building declaration objects}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid10506949  in a concise and consistent manner}{\rtlch\fcs1 
\af0 \ltrch\fcs0 \insrsid15228519 ; see parsing_tensor.py and parsing_declaration.py for an example of use.}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid10506949  }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid2492522 \line }{\rtlch\fcs1 \af0 \ltrch\fcs0 
\insrsid10506949 Building KernelDeclarations in end-user code is entirely possible as well, but
 so far the power of the front-end declaration language has been able to keep pace with the features in the KernelDeclaration, so there should not be any real use for this.}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid15228519 
\par {\listtext\pard\plain\ltrpar \s15 \rtlch\fcs1 \af0\afs22 \ltrch\fcs0 \f3\fs22\insrsid15228519 \loch\af3\dbch\af0\hich\f3 \'b7\tab}KernelFactory}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid10035144 
: The public Kernel interface one is dealing with in typical use. It transparently handles JIT compilation of its associated KernelDeclaration}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid10506949 , based on inferred or explicitly specified template arguments.}{
\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid15228519 
\par {\listtext\pard\plain\ltrpar \s15 \rtlch\fcs1 \af0\afs22 \ltrch\fcs0 \f3\fs22\insrsid15228519 \loch\af3\dbch\af0\hich\f3 \'b7\tab}KernelInstance}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid10035144 : Kernel object compiled against a
 complete set of template arguments. It provides methods for runtime argument checking, collection of required runtime arguments, and automatic thread/block assignment.}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid15228519 
\par {\listtext\pard\plain\ltrpar \s15 \rtlch\fcs1 \af0\afs22 \ltrch\fcs0 \f3\fs22\insrsid15228519 \loch\af3\dbch\af0\hich\f3 \'b7\tab}CodeGenerator}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid10035144 : class responsible for translating a }{\rtlch\fcs1 \af0 
\ltrch\fcs0 \insrsid10506949 KernelDeclaration into valid backend-specific code. M}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid15228519 
ost lines of code are in a general C_Code_Generator baseclass; the parts which are backend specific are delegated to subclasses}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid10506949 .}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid15228519 
\par }\pard\plain \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid15228519 \rtlch\fcs1 \af0\afs22\alang1025 \ltrch\fcs0 \f31506\fs22\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid15228519\charrsid15228519 
\par }\pard\plain \ltrpar\s2\ql \li0\ri0\sb200\sl276\slmult1\keep\keepn\widctlpar\wrapdefault\aspalpha\aspnum\faauto\outlinelevel1\adjustright\rin0\lin0\itap0\pararsid82840 \rtlch\fcs1 \ab\af0\afs26\alang1025 \ltrch\fcs0 
\b\fs26\cf17\lang1033\langfe1033\loch\af31502\hich\af31502\dbch\af31501\cgrid\langnp1033\langfenp1033 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid4929027 \hich\af31502\dbch\af31501\loch\f31502 Relation to other projects}{\rtlch\fcs1 \af0 \ltrch\fcs0 
\insrsid82840 
\par }\pard\plain \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid82840 \rtlch\fcs1 \af0\afs22\alang1025 \ltrch\fcs0 \f31506\fs22\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid82840 In terms of overall intent and approach, ThreadWeave is most similar to scipy.weave, which is}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid5791842  where it derives its name from. }{\rtlch\fcs1 \af0 \ltrch\fcs0 
\insrsid216852 ThreadWeave is built as a layer on top of pycuda and pyopencl; infact, ThreadWeave was inspired by the elementwise function from these packages, which is similar in intent, if }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13248007 much }{
\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid216852 more limited in functionality.
\par }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid5791842 There exist many pyt}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid2492522 hon libraries for facilitating S}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid5791842 IMD programming}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid216852 
 with higher level concepts}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid5791842 ; notable ones are Loo.py, Theano, copperhead (seems to be inactive), and CUDA Thrust (as used within pycuda).
\par They all share an intent}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid15228519 ion}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid5791842  to bring functional programming techniques to the GPU; which is a sensible aim, given the hig}{\rtlch\fcs1 \af0 \ltrch\fcs0 
\insrsid2492522 hly formulaic nature of much C S}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid5791842 IMD code.}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid216852  However, not }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid2492522 every S}{\rtlch\fcs1 \af0 \ltrch\fcs0 
\insrsid8602437 IMD programming problem}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid216852  can be naturally expressed in a functional framework, and often some hacky C code is the }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid8602437 more}{\rtlch\fcs1 \af0 
\ltrch\fcs0 \insrsid15228519  natural}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid216852  solution, especially considering the performance oriented nature of most }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid2492522 applications}{\rtlch\fcs1 \af0 \ltrch\fcs0 
\insrsid216852 .}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid4546952  Most of the repetitive nature of kernel code can be eliminated with a simple C preprocessor, which is }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid8602437 the approach ThreadWeave takes}{
\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid8745576 . If you can}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid4546952 not fit your proble
m into one of ThreadWeave abstractions, that does not mean it is back to square one of plain old C; you simply handcode that part, while still enjoying its other conveniences. This is the niche that ThreadWeave aims to fill.}{\rtlch\fcs1 \af0 \ltrch\fcs0 
\insrsid5791842 
\par }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid4546952 ThreadWeave aspires to expand its higher level and more functional layer in the future}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13248007 .}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid4546952 
 It is my hope that ThreadWeave and loo.py }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13248007 become integrated}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid4546952 
. They both have their own application domains, but they also share a lot of functionality and intent. }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13248007 Ideally, loo.py could be built on top
 of ThreadWeave, relying on it for backend independence, front end syntax, nd-array handling and other basics like JIT-compilation}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid15228519  of template arguments}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13248007 
, while bringing its excellent functional }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid15228519 programming }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid13248007 capabilities to a wider audience.}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid2492522  }{\rtlch\fcs1 \af0 
\ltrch\fcs0 \insrsid4072033 
\par Theano in turn, (another python package much beloved by me)}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid1064640  }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid8602437 might}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid10048994  in an ideal world}{\rtlch\fcs1 \af0 
\ltrch\fcs0 \insrsid4072033  be built on top of }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid2492522 such a software stack}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid4072033 .}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid2492522  }{\rtlch\fcs1 \af0 \ltrch\fcs0 
\insrsid10048994 At present the Theano development team has to maintain its own GPU nd-array kernel code, while without a doubt, that is a cause worthy of its own development team}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid2492522 .}{\rtlch\fcs1 \af0 
\ltrch\fcs0 \insrsid10048994  Whether it comes to the point where this package will be general and robust enough to serve such needs, I do not know, but this is certainly the direction that I believe this project should take.}{\rtlch\fcs1 \af0 
\ltrch\fcs0 \insrsid4546952\charrsid82840 
\par }\pard\plain \ltrpar\s2\ql \li0\ri0\sb200\sl276\slmult1\keep\keepn\widctlpar\wrapdefault\aspalpha\aspnum\faauto\outlinelevel1\adjustright\rin0\lin0\itap0\pararsid8602437 \rtlch\fcs1 \ab\af0\afs26\alang1025 \ltrch\fcs0 
\b\fs26\cf17\lang1033\langfe1033\loch\af31502\hich\af31502\dbch\af31501\cgrid\langnp1033\langfenp1033 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid8602437 
\par }\pard \ltrpar\s2\ql \li0\ri0\sb200\sl276\slmult1\keep\keepn\widctlpar\wrapdefault\aspalpha\aspnum\faauto\outlinelevel1\adjustright\rin0\lin0\itap0\pararsid9777269 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid15822257 \hich\af31502\dbch\af31501\loch\f31502 
Planned functionality}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid9777269 
\par }\pard\plain \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid14552026 \rtlch\fcs1 \af0\afs22\alang1025 \ltrch\fcs0 \f31506\fs22\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid14552026 This project has so far been a one man effort. It has gone through several rewrites from the ground up, and I would not be surprised if it went through a few more}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid2325461 
, after going public and receiving feedback. At present, ThreadWeave does what I set out for it to do, but as it has become a bit of a goal in itself, I expect to be actively developing it in the future. }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid8745576 

\par }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid2325461 Here is a short list of the functionality I feel is currently missing, and which I might add in the near future}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid10048994 , or would encourage others to help with}{
\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid8745576 ; but I am sure many obvious features are missing, and your input is much appreciated}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid2325461 :}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid14552026\charrsid14552026 
\par {\listtext\pard\plain\ltrpar \s15 \rtlch\fcs1 \af0\afs22 \ltrch\fcs0 \f37\fs22\insrsid9777269 \hich\af37\dbch\af0\loch\f37 -\tab}}\pard\plain \ltrpar\s15\ql \fi-360\li413\ri0\sa200\sl276\slmult1
\widctlpar\wrapdefault\aspalpha\aspnum\faauto\ls1\adjustright\rin0\lin413\itap0\pararsid9777269\contextualspace \rtlch\fcs1 \af0\afs22\alang1025 \ltrch\fcs0 \f31506\fs22\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\rtlch\fcs1 \af0 \ltrch\fcs0 
\insrsid9777269 A natural way to include auxiliary functions, or other pieces of C code. Of course one can just append anything desirable to the source string, but it would be nice }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid2325461 to have the ability to}{
\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid9777269  pass arrays around, and so forth. 
\par {\listtext\pard\plain\ltrpar \s15 \rtlch\fcs1 \af0\afs22 \ltrch\fcs0 \f37\fs22\insrsid2325461 \hich\af37\dbch\af0\loch\f37 -\tab}}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid2325461 Support for arbitrarily strided arrays}{\rtlch\fcs1 \af0 \ltrch\fcs0 
\insrsid10048994 . This should be a breeze to add, once the latest compyte nd-array is merged with pycuda and pyopencl.}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid10710116  Also, if such is supported, it would be good to be 
able to place declarative constraints on the ordering of arrays; either to ensure an input argument has the expected layout, and cast or raise otherwise, or to allocate an output array in a specific manner. Control over }{\rtlch\fcs1 \af0 \ltrch\fcs0 
\insrsid1862259 strides}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid10710116  is important, considering their implications for memory coalescing.}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid2325461 
\par {\listtext\pard\plain\ltrpar \s15 \rtlch\fcs1 \af0\afs22 \ltrch\fcs0 \f37\fs22\insrsid14122374 \hich\af37\dbch\af0\loch\f37 -\tab}}\pard \ltrpar\s15\ql \fi-360\li413\ri0\sa200\sl276\slmult1
\widctlpar\wrapdefault\aspalpha\aspnum\faauto\ls1\adjustright\rin0\lin413\itap0\pararsid14122374\contextualspace {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid14122374 
Support for various array caching schemes. Two very common cases come to mind where shared memory makes the difference, and which should not be too hard to generalize and abstract away: a front of threads iterating
 through an array to perform a stencil operation, and matrix}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid15607267  multiplication or transpose type }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid14122374 operations.}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid15607267 
 Also, small and frequently accessed arrays may be hoisted into shared mem entirely, to take pressure off the cache.}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid14122374 
\par {\listtext\pard\plain\ltrpar \s15 \rtlch\fcs1 \af0\afs22 \ltrch\fcs0 \f37\fs22\insrsid9777269 \hich\af37\dbch\af0\loch\f37 -\tab}}\pard \ltrpar\s15\ql \fi-360\li413\ri0\sa200\sl276\slmult1
\widctlpar\wrapdefault\aspalpha\aspnum\faauto\ls1\adjustright\rin0\lin413\itap0\pararsid9777269\contextualspace {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid9777269 Support for }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid2325461 arrays of structs, a
nd structs of arrays}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid1669360 . That includes complex arrays of both kinds}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid10048994 .}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid15874313 
 It would be nice if both were supported elegantly on both the python and kernel side of things; ie, automatic struct decla}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid11413282 ration generation from the python typedef}{\rtlch\fcs1 \af0 \ltrch\fcs0 
\insrsid15874313 , and structs of arrays being passable into the function as a single entity. Perhaps it is a bit too voodoo, but there is something to be said for translating array_id[index].field to array_id_field[index]}{\rtlch\fcs1 \af0 \ltrch\fcs0 
\insrsid11413282  if array_id is a struct of arrays}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid15874313 , so memory layout can be switched declaratively, without chan}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid11413282 
ging a single line of body code, analogous to the way strides abstract away memory layout.}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid9777269 
\par {\listtext\pard\plain\ltrpar \s15 \rtlch\fcs1 \af0\afs22 \ltrch\fcs0 \f37\fs22\insrsid2325461 \hich\af37\dbch\af0\loch\f37 -\tab}}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid2325461 A rich way of specifying symbolic constraints between axes}{\rtlch\fcs1 \af0 
\ltrch\fcs0 \insrsid10710116  sizes}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid2325461 . }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid10048994 At present, only equal and constant size constraints are fully supported}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid2325461 .}{
\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid10048994  But it would be nice to support arbitrary arithmetic relations}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid8745576  and inequalities}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid10048994 
 between the array and kernel axes; for instance, when tiling an array, the output dimensions are N times the input dimensions}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid10710116 ; when differentiating along an axis, that dimension shrinks by one; and so forth
}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid1862259  (the latter can actually be expressed as a stencil operation, size constraints and all)}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid10710116 
. One could use sympy to solve these symbolic relations at declaration time for the missing quantities, and derive explicit expressions that can efficiently be evaluated by the runtime components.}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid2325461 
\par {\listtext\pard\plain\ltrpar \s15 \rtlch\fcs1 \af0\afs22 \ltrch\fcs0 \f37\fs22\insrsid10710116 \hich\af37\dbch\af0\loch\f37 -\tab}}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid10710116 
Improvements to grid and block allocations. The current implementation works, but is not particularly intelligent. }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid1862259 Considering how problem dependent this is, there should probably be the option to}{
\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid10710116  choose from different strategies}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid15796680  during kernel declaration}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid10710116 , and provide a manual override}{\rtlch\fcs1 \af0 
\ltrch\fcs0 \insrsid1862259  as well.}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid10710116 
\par {\listtext\pard\plain\ltrpar \s15 \rtlch\fcs1 \af0\afs22 \ltrch\fcs0 \f37\fs22\insrsid1862259 \hich\af37\dbch\af0\loch\f37 -\tab}}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid1862259 
Provide virtual parallel axes. CUDA supports only up to three parallel axes (or two for old hardware). It has not been a practical concern yet, but there should not be a limit to their
 number. If there are more parallel axes than hardware axes, multiple axes should be packed into a single hardware axis.}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid15796680 
 Similarly; the length of any particular axis should not be limited by hardware constraints, and should be virtualized where necessary.}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid1862259 
\par {\listtext\pard\plain\ltrpar \s15 \rtlch\fcs1 \af0\afs22 \ltrch\fcs0 \f37\fs22\insrsid15025095 \hich\af37\dbch\af0\loch\f37 -\tab}}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid15025095 
Provide syntax to explicitly structure code involving serial axes iteration. By default, the whole kernel is the loop body, but we may wish to place code before, in, or after any given axis loop. Something like }{\rtlch\fcs1 \af0 \ltrch\fcs0 
\insrsid8745576 \lquote }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid15025095 axis(axis_identifier) \{}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid14122374 body}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid15025095 \}}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid8745576 \rquote }{
\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid15025095  should do the trick, where this construct is translated into }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid8745576 the}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid15025095 
 actual for loop over the axis, or is simply taken out in case of a parallel axis.\line It is probably more typical to wish to structure code relative to the whole of all serial axes iteration though}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid15607267 
 (declaring a dummy, serially reducing, and then atomically reducing an array comes to mind)}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid15025095 . }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid8745576 Just \lquote }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid14122374 for}{
\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid8745576  \{}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid14122374 body}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid8745576 \}\rquote  or something like it should work for that. Both syntaxes could coexist.}{\rtlch\fcs1 \af0 
\ltrch\fcs0 \insrsid15025095\charrsid9777269 
\par }\pard\plain \ltrpar\s2\ql \li0\ri0\sb200\sl276\slmult1\keep\keepn\widctlpar\wrapdefault\aspalpha\aspnum\faauto\outlinelevel1\adjustright\rin0\lin0\itap0\pararsid8602437 \rtlch\fcs1 \ab\af0\afs26\alang1025 \ltrch\fcs0 
\b\fs26\cf17\lang1033\langfe1033\loch\af31502\hich\af31502\dbch\af31501\cgrid\langnp1033\langfenp1033 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid15796680 \hich\af31502\dbch\af31501\loch\f31502 Acknowledgement}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid8602437 

\par }\pard\plain \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid8602437 \rtlch\fcs1 \af0\afs22\alang1025 \ltrch\fcs0 \f31506\fs22\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid8602437 Andreas Kloenckner, of pycuda and pyopencl fame}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid10555684 , which makes all of this possible.}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid8602437 
\par }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid8602437\charrsid3883046 Paul McGuire}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid8602437 , for the awesome pyparsing}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid10555684 
, without which starting a project of this kind would never have crossed my mind.}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid8602437 
\par }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid1380622 A}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid8602437 nd the terrific python community as a whole, whom I hope to repay a small part of my debt to.
\par }\pard\plain \ltrpar\s2\ql \li0\ri0\sb200\sl276\slmult1\keep\keepn\widctlpar\wrapdefault\aspalpha\aspnum\faauto\outlinelevel1\adjustright\rin0\lin0\itap0\pararsid8602437 \rtlch\fcs1 \ab\af0\afs26\alang1025 \ltrch\fcs0 
\b\fs26\cf17\lang1033\langfe1033\loch\af31502\hich\af31502\dbch\af31501\cgrid\langnp1033\langfenp1033 {\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid15796680 \hich\af31502\dbch\af31501\loch\f31502 Terms \hich\af31502\dbch\af31501\loch\f31502 of use}{\rtlch\fcs1 
\af0 \ltrch\fcs0 \insrsid8602437 
\par }\pard\plain \ltrpar\ql \li0\ri0\sa200\sl276\slmult1\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \rtlch\fcs1 \af0\afs22\alang1025 \ltrch\fcs0 \f31506\fs22\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\rtlch\fcs1 \af0 
\ltrch\fcs0 \insrsid8602437 To do with as you please. Acknowledgement or citations, where applicable, are appreciated.}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid1380622  }{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid14552026 Ideas and s}{\rtlch\fcs1 \af0 
\ltrch\fcs0 \insrsid1380622 uggestions for improvements are always welcome, as are actual improvements themselves.}{\rtlch\fcs1 \af0 \ltrch\fcs0 \insrsid14306713 
\par }{\*\themedata 504b030414000600080000002100e9de0fbfff0000001c020000130000005b436f6e74656e745f54797065735d2e786d6cac91cb4ec3301045f748fc83e52d4a
9cb2400825e982c78ec7a27cc0c8992416c9d8b2a755fbf74cd25442a820166c2cd933f79e3be372bd1f07b5c3989ca74aaff2422b24eb1b475da5df374fd9ad
5689811a183c61a50f98f4babebc2837878049899a52a57be670674cb23d8e90721f90a4d2fa3802cb35762680fd800ecd7551dc18eb899138e3c943d7e503b6
b01d583deee5f99824e290b4ba3f364eac4a430883b3c092d4eca8f946c916422ecab927f52ea42b89a1cd59c254f919b0e85e6535d135a8de20f20b8c12c3b0
0c895fcf6720192de6bf3b9e89ecdbd6596cbcdd8eb28e7c365ecc4ec1ff1460f53fe813d3cc7f5b7f020000ffff0300504b030414000600080000002100a5d6
a7e7c0000000360100000b0000005f72656c732f2e72656c73848fcf6ac3300c87ef85bd83d17d51d2c31825762fa590432fa37d00e1287f68221bdb1bebdb4f
c7060abb0884a4eff7a93dfeae8bf9e194e720169aaa06c3e2433fcb68e1763dbf7f82c985a4a725085b787086a37bdbb55fbc50d1a33ccd311ba548b6309512
0f88d94fbc52ae4264d1c910d24a45db3462247fa791715fd71f989e19e0364cd3f51652d73760ae8fa8c9ffb3c330cc9e4fc17faf2ce545046e37944c69e462
a1a82fe353bd90a865aad41ed0b5b8f9d6fd010000ffff0300504b0304140006000800000021006b799616830000008a0000001c0000007468656d652f746865
6d652f7468656d654d616e616765722e786d6c0ccc4d0ac3201040e17da17790d93763bb284562b2cbaebbf600439c1a41c7a0d29fdbd7e5e38337cedf14d59b
4b0d592c9c070d8a65cd2e88b7f07c2ca71ba8da481cc52c6ce1c715e6e97818c9b48d13df49c873517d23d59085adb5dd20d6b52bd521ef2cdd5eb9246a3d8b
4757e8d3f729e245eb2b260a0238fd010000ffff0300504b030414000600080000002100ab322f0ca8060000a71b0000160000007468656d652f7468656d652f
7468656d65312e786d6cec594d6f1b4518be23f11f467b6f6327761a4775aad8b11b4853a2d82dea71bc3bde9d66766735334eea1b6a8f484888823850891b07
04546a252ee5d7048aa048fd0bbc33b3bbde89d72469235a417d48bcb3cfbcdfef331fbe7aed5eccd0211192f2a4edd52fd73c44129f073409dbdead61ffd29a
87a4c24980194f48db9b12e95ddb78ffbdab785d45242608e627721db7bd48a9747d6949fa308ce5659e9204de8db988b18247112e05021f81dc982d2dd76aab
4b31a68987121c83d81d9c28ce851689bd8d5c788f818644493de03331d0a2893bc3808383ba86c8a9ec32810e316b7ba028e04743724f798861a9e045dbab99
8fb7b4717509af6793985a30b734af6f3ed9bc6c4270b06c748a705428adf71bad2b5b857c03606a1ed7ebf5babd7a21cf00b0ef83abd696b2cc467faddec965
9640f6ebbcec6ead596bb8f892fc95399b5b9d4ea7d9ca6cb1420dc87e6dcce1d76aab8dcd65076f4016df9cc3373a9bddeeaa8337208b5f9dc3f7afb4561b2e
de802246938339b44e68bf9f492f2063ceb62be16b005fab65f0190aaaa1282fad62cc13b5b0d8627c978b3e203492614513a4a62919631feab88be391a0586b
c0eb0497ded8215fce0d696548fa82a6aaed7d9862e88999bc97cf7e78f9ec093abefff4f8fecfc70f1e1cdfffc90a72666de3242ccf7af1dde77f3dfa04fdf9
e4db170fbfacc6cb32feb71f3ffdf5972faa81d03f33739e7ff5f8f7a78f9f7ffdd91fdf3fac806f0a3c2ac387342612dd2447689fc7e098898a6b391989f3cd
18469896676c26a1c409d65a2ae4f754e4a06f4e31cbb2e3d8d1216e046f0be08f2ae0f5c95dc7e04124268a5668de896207b8cb39eb705119851dadab14e6e1
2409ab958b4919b78ff16195ee2e4e9cfcf6262930675e968ee3dd883866ee3160621c928428a4dff103422abcbb43a913d75dea0b2ef958a13b147530ad0cc9
908e9c6a9a4ddaa631e4655ae533e4db89cdee6dd4e1accaeb2d72e822a12b30ab307e489813c6eb78a2705c25728863560ef80daca22a230753e197713da920
d321611cf5022265d59c8f04f85b4afa0e06caaa4cfb2e9bc62e52287a5025f306e6bc8cdce207dd08c76915764093a88cfd401e408962b4c755157c97bb1da2
9f210f385998eedb9438e93e9d0d6ed1d031695620facd4454e4f23ae14efd0ea66c8c89a11a607587ab639afc1371330acc6d355c1c7103553effe65185dd6f
2b656fc2ea55d533db27887a11ee243d77b908e8dbcfce5b7892ec116888f925ea1d39bf2367389ffcc7c979513f5f3c25cf5818085aef45ec4edbecbbe3c5db
ee31656ca0a68cdc9066e72d61f109fa30a8279a432729ce6169045f752b830607170a6ce620c1d5c754458308a7b06baf7b5a482833d1a1442997705c34c395
b2351e76feca1e369bfa1862a94362b5cb033bbca287f3d34621c658159a336dae68450b38abb2952b9950f0ed5594d5b55167d65637a6195674b4152eeb109b
733984bc700d068b6842e320d80b419457e1d8af55c369073312e8b8db1ce5693159b8c814c9080724cb91f67b3e477593a4bc56e61cd17ed862d047c753a256
d2d6d2625f43db59925456d758a02ecfdeeb6429afe0599640dac9766449b93959828eda5eabb9dcf4908fd3b6378683327c8d53c8bad41b49cc42b86ff295b0
657f6a339b2e9f65b3953be636411d2e3f6cdce71c76782015526d6119d9d230afb2126089d664ed5f6e42582fca810a363a9b152b6b500c6fcc0a88a39b5a32
1e135f95935d1ad1b1b38f1995f289226210054768c426621f43fa75a9823f019570df6118413fc0ed9c8eb679e59273d674e53b3183b3e398a511cee856b768
dec9166e08a9b0c13c95cc03df2a6d37ce9ddf15d3f217e44ab98cff67aee8f504ae1f56029d011f6e870546ba53da9ebe1fe6c0426944fdbe809d83e10ea816
b8e185d7505470476dfe0b72a8ffdb9eb3324c5bc32952edd310090aeb918a04217b404ba6fa4e1156cfd62e2b9265824c4595cc95a9357b440e091b6a0e5cd5
6bbb87222875c326190d18dcc9fa739fb30e1a857a9353ee3787c98ab5d7f6c0bfbdf3b1cd0c4eb93c6c363479fc0b138bedc16c55b5f3cdf47ced2d3ba25fcc
b6598dbc2b4059692968656dff8a269c73a9b58c35e7f17233370eb238ef310c161ba2142e9190fe03eb1f153e23a68cf5823ae4fbc0ad087ebed0c2a06ca0aa
2fd98d07d204690747b071b283b698b4281bda6ceba4a3962fd617bcd32df49e08b6b6ec2cf93e67b08bcd99abcee9c58b0c76166127d6766c61a821b3275b14
86c6f949c624c6fc5256fe318b8fee42a2b7e047830953d21413fc522530eca107a60fa0f9ad463375e36f000000ffff0300504b030414000600080000002100
0dd1909fb60000001b010000270000007468656d652f7468656d652f5f72656c732f7468656d654d616e616765722e786d6c2e72656c73848f4d0ac2301484f7
8277086f6fd3ba109126dd88d0add40384e4350d363f2451eced0dae2c082e8761be9969bb979dc9136332de3168aa1a083ae995719ac16db8ec8e4052164e89
d93b64b060828e6f37ed1567914b284d262452282e3198720e274a939cd08a54f980ae38a38f56e422a3a641c8bbd048f7757da0f19b017cc524bd62107bd500
1996509affb3fd381a89672f1f165dfe514173d9850528a2c6cce0239baa4c04ca5bbabac4df000000ffff0300504b01022d0014000600080000002100e9de0f
bfff0000001c0200001300000000000000000000000000000000005b436f6e74656e745f54797065735d2e786d6c504b01022d0014000600080000002100a5d6
a7e7c0000000360100000b00000000000000000000000000300100005f72656c732f2e72656c73504b01022d00140006000800000021006b799616830000008a
0000001c00000000000000000000000000190200007468656d652f7468656d652f7468656d654d616e616765722e786d6c504b01022d00140006000800000021
00ab322f0ca8060000a71b00001600000000000000000000000000d60200007468656d652f7468656d652f7468656d65312e786d6c504b01022d001400060008
00000021000dd1909fb60000001b0100002700000000000000000000000000b20900007468656d652f7468656d652f5f72656c732f7468656d654d616e616765722e786d6c2e72656c73504b050600000000050005005d010000ad0a00000000}
{\*\colorschememapping 3c3f786d6c2076657273696f6e3d22312e302220656e636f64696e673d225554462d3822207374616e64616c6f6e653d22796573223f3e0d0a3c613a636c724d
617020786d6c6e733a613d22687474703a2f2f736368656d61732e6f70656e786d6c666f726d6174732e6f72672f64726177696e676d6c2f323030362f6d6169
6e22206267313d226c743122207478313d22646b3122206267323d226c743222207478323d22646b322220616363656e74313d22616363656e74312220616363
656e74323d22616363656e74322220616363656e74333d22616363656e74332220616363656e74343d22616363656e74342220616363656e74353d22616363656e74352220616363656e74363d22616363656e74362220686c696e6b3d22686c696e6b2220666f6c486c696e6b3d22666f6c486c696e6b222f3e}
{\*\latentstyles\lsdstimax267\lsdlockeddef0\lsdsemihiddendef1\lsdunhideuseddef1\lsdqformatdef0\lsdprioritydef99{\lsdlockedexcept \lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority0 \lsdlocked0 Normal;
\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority9 \lsdlocked0 heading 1;\lsdqformat1 \lsdpriority9 \lsdlocked0 heading 2;\lsdqformat1 \lsdpriority9 \lsdlocked0 heading 3;\lsdqformat1 \lsdpriority9 \lsdlocked0 heading 4;
\lsdqformat1 \lsdpriority9 \lsdlocked0 heading 5;\lsdqformat1 \lsdpriority9 \lsdlocked0 heading 6;\lsdqformat1 \lsdpriority9 \lsdlocked0 heading 7;\lsdqformat1 \lsdpriority9 \lsdlocked0 heading 8;\lsdqformat1 \lsdpriority9 \lsdlocked0 heading 9;
\lsdpriority39 \lsdlocked0 toc 1;\lsdpriority39 \lsdlocked0 toc 2;\lsdpriority39 \lsdlocked0 toc 3;\lsdpriority39 \lsdlocked0 toc 4;\lsdpriority39 \lsdlocked0 toc 5;\lsdpriority39 \lsdlocked0 toc 6;\lsdpriority39 \lsdlocked0 toc 7;
\lsdpriority39 \lsdlocked0 toc 8;\lsdpriority39 \lsdlocked0 toc 9;\lsdqformat1 \lsdpriority35 \lsdlocked0 caption;\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority10 \lsdlocked0 Title;\lsdpriority1 \lsdlocked0 Default Paragraph Font;
\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority11 \lsdlocked0 Subtitle;\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority22 \lsdlocked0 Strong;\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority20 \lsdlocked0 Emphasis;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority59 \lsdlocked0 Table Grid;\lsdunhideused0 \lsdlocked0 Placeholder Text;\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority1 \lsdlocked0 No Spacing;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority60 \lsdlocked0 Light Shading;\lsdsemihidden0 \lsdunhideused0 \lsdpriority61 \lsdlocked0 Light List;\lsdsemihidden0 \lsdunhideused0 \lsdpriority62 \lsdlocked0 Light Grid;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority63 \lsdlocked0 Medium Shading 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority64 \lsdlocked0 Medium Shading 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority65 \lsdlocked0 Medium List 1;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority66 \lsdlocked0 Medium List 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority67 \lsdlocked0 Medium Grid 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority68 \lsdlocked0 Medium Grid 2;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority69 \lsdlocked0 Medium Grid 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority70 \lsdlocked0 Dark List;\lsdsemihidden0 \lsdunhideused0 \lsdpriority71 \lsdlocked0 Colorful Shading;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority72 \lsdlocked0 Colorful List;\lsdsemihidden0 \lsdunhideused0 \lsdpriority73 \lsdlocked0 Colorful Grid;\lsdsemihidden0 \lsdunhideused0 \lsdpriority60 \lsdlocked0 Light Shading Accent 1;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority61 \lsdlocked0 Light List Accent 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority62 \lsdlocked0 Light Grid Accent 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 1;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority65 \lsdlocked0 Medium List 1 Accent 1;\lsdunhideused0 \lsdlocked0 Revision;
\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority34 \lsdlocked0 List Paragraph;\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority29 \lsdlocked0 Quote;\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority30 \lsdlocked0 Intense Quote;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority66 \lsdlocked0 Medium List 2 Accent 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 1;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority70 \lsdlocked0 Dark List Accent 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority71 \lsdlocked0 Colorful Shading Accent 1;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority72 \lsdlocked0 Colorful List Accent 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority73 \lsdlocked0 Colorful Grid Accent 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority60 \lsdlocked0 Light Shading Accent 2;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority61 \lsdlocked0 Light List Accent 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority62 \lsdlocked0 Light Grid Accent 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 2;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority65 \lsdlocked0 Medium List 1 Accent 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority66 \lsdlocked0 Medium List 2 Accent 2;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 2;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority70 \lsdlocked0 Dark List Accent 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority71 \lsdlocked0 Colorful Shading Accent 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority72 \lsdlocked0 Colorful List Accent 2;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority73 \lsdlocked0 Colorful Grid Accent 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority60 \lsdlocked0 Light Shading Accent 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority61 \lsdlocked0 Light List Accent 3;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority62 \lsdlocked0 Light Grid Accent 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 3;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority65 \lsdlocked0 Medium List 1 Accent 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority66 \lsdlocked0 Medium List 2 Accent 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 3;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority70 \lsdlocked0 Dark List Accent 3;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority71 \lsdlocked0 Colorful Shading Accent 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority72 \lsdlocked0 Colorful List Accent 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority73 \lsdlocked0 Colorful Grid Accent 3;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority60 \lsdlocked0 Light Shading Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority61 \lsdlocked0 Light List Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority62 \lsdlocked0 Light Grid Accent 4;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority65 \lsdlocked0 Medium List 1 Accent 4;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority66 \lsdlocked0 Medium List 2 Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 4;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority70 \lsdlocked0 Dark List Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority71 \lsdlocked0 Colorful Shading Accent 4;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority72 \lsdlocked0 Colorful List Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority73 \lsdlocked0 Colorful Grid Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority60 \lsdlocked0 Light Shading Accent 5;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority61 \lsdlocked0 Light List Accent 5;\lsdsemihidden0 \lsdunhideused0 \lsdpriority62 \lsdlocked0 Light Grid Accent 5;\lsdsemihidden0 \lsdunhideused0 \lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 5;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 5;\lsdsemihidden0 \lsdunhideused0 \lsdpriority65 \lsdlocked0 Medium List 1 Accent 5;\lsdsemihidden0 \lsdunhideused0 \lsdpriority66 \lsdlocked0 Medium List 2 Accent 5;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 5;\lsdsemihidden0 \lsdunhideused0 \lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 5;\lsdsemihidden0 \lsdunhideused0 \lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 5;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority70 \lsdlocked0 Dark List Accent 5;\lsdsemihidden0 \lsdunhideused0 \lsdpriority71 \lsdlocked0 Colorful Shading Accent 5;\lsdsemihidden0 \lsdunhideused0 \lsdpriority72 \lsdlocked0 Colorful List Accent 5;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority73 \lsdlocked0 Colorful Grid Accent 5;\lsdsemihidden0 \lsdunhideused0 \lsdpriority60 \lsdlocked0 Light Shading Accent 6;\lsdsemihidden0 \lsdunhideused0 \lsdpriority61 \lsdlocked0 Light List Accent 6;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority62 \lsdlocked0 Light Grid Accent 6;\lsdsemihidden0 \lsdunhideused0 \lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 6;\lsdsemihidden0 \lsdunhideused0 \lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 6;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority65 \lsdlocked0 Medium List 1 Accent 6;\lsdsemihidden0 \lsdunhideused0 \lsdpriority66 \lsdlocked0 Medium List 2 Accent 6;\lsdsemihidden0 \lsdunhideused0 \lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 6;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 6;\lsdsemihidden0 \lsdunhideused0 \lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 6;\lsdsemihidden0 \lsdunhideused0 \lsdpriority70 \lsdlocked0 Dark List Accent 6;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority71 \lsdlocked0 Colorful Shading Accent 6;\lsdsemihidden0 \lsdunhideused0 \lsdpriority72 \lsdlocked0 Colorful List Accent 6;\lsdsemihidden0 \lsdunhideused0 \lsdpriority73 \lsdlocked0 Colorful Grid Accent 6;
\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority19 \lsdlocked0 Subtle Emphasis;\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority21 \lsdlocked0 Intense Emphasis;
\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority31 \lsdlocked0 Subtle Reference;\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority32 \lsdlocked0 Intense Reference;
\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority33 \lsdlocked0 Book Title;\lsdpriority37 \lsdlocked0 Bibliography;\lsdqformat1 \lsdpriority39 \lsdlocked0 TOC Heading;}}{\*\datastore 010500000200000018000000
4d73786d6c322e534158584d4c5265616465722e362e3000000000000000000000060000
d0cf11e0a1b11ae1000000000000000000000000000000003e000300feff090006000000000000000000000001000000010000000000000000100000feffffff00000000feffffff0000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffffffffffffffffdfffffffeffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffff52006f006f007400200045006e00740072007900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000016000500ffffffffffffffffffffffff0c6ad98892f1d411a65f0040963251e5000000000000000000000000205d
bdff68b0cd01feffffff00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffff0000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffff000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000105000000000000}}